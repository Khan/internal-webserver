diff --git a/fill-database.py b/fill-database.py
new file mode 100644
index 0000000..8f82da1
--- /dev/null
+++ b/fill-database.py
@@ -0,0 +1,221 @@
+import os
+import random
+import sys
+from optparse import make_option
+
+from django import forms
+from django.contrib.auth.models import User
+from django.core.management.base import BaseCommand
+from django.core.management.base import NoArgsCommand
+
+from reviewboard.accounts.models import Profile
+from reviewboard.diffviewer.models import FileDiff, DiffSet, DiffSetHistory
+from reviewboard.diffviewer.forms import UploadDiffForm
+from reviewboard.reviews.models import ReviewRequest
+from reviewboard.scmtools.models import Repository, Tool
+
+
+class Command(NoArgsCommand):
+    help = 'Populates the database with the specified fields'
+
+    option_list = BaseCommand.option_list + (
+        make_option('-u', '--users', type="int", default=None, dest='users',
+            help='The number of users to add'),
+        make_option('--review-requests', default=None, dest='review-requests',
+            help='The number of review requests per user [min:max]'),
+        make_option('--diffs', default=None, dest='diffs',
+            help='The number of diff per review request [min:max]'),
+        make_option('--diff-comments', default=None, dest='diff-comments',
+            help='The number of comments per diff [min:max]')
+        )
+
+    def handle_noargs(self, **options):
+        users = options.get('users', None)
+        review_requests = options.get('review-requests', None)
+        diffs = options.get('diffs', None)
+        diff_comments = options.get('diff-comments', None)
+        num_of_requests = None
+        num_of_diffs = None
+        num_of_diff_comments = None
+        random.seed()
+
+        if review_requests:
+            num_of_requests = self.parseCommand("review_requests",
+                review_requests)
+
+            #TEMPORARY TEXT OUTPUT
+            if len(num_of_requests) == 1:
+                self.stdout.write("Each user gets exactly " \
+                    + str(num_of_requests[0]) + "requests\n")
+            else:
+                self.stdout.write("Review-request range: " \
+                    + str(num_of_requests[0]) + \
+                    " to " + str(num_of_requests[1]) + "\n" )
+
+        if diffs:
+            num_of_diffs = self.parseCommand("diffs", diffs)
+
+        if diff_comments:
+            num_of_diff_comments = self.parseCommand("diff-comments",
+                diff_comments)
+            #TEMPORARY OUTPUT
+            self.stdout.write("You entered a range from " + \
+                str(num_of_diff_comments) + \
+                " to " + str(num_of_diff_comments) + "\n")
+
+        if users:
+            #TEMPORARY OUTPUT
+            self.stdout.write("The number of users=" + str(users) + "\n")
+
+            if num_of_requests:
+                #path to the test repository based from this script
+                repo_dir = str(os.path.abspath(sys.argv[0] +
+                    'manage.py/../scmtools/testdata/git_repo'))
+                if not os.path.exists(repo_dir):
+                    self.stdout.write("The path to the repository does " + \
+                        "not exist\n")
+                    return
+
+                self.stdout.write("this is the repo directory:\n" + \
+                    repo_dir + "\n" )
+                self.stdout.write("SCMTOOL: " + \
+                    str(Tool.objects.get(name="Git")) + "\n")
+
+                #Setup a repository
+                test_repository = Repository.objects.create(
+                    name="Test Repository", path=repo_dir,
+                    tool=Tool.objects.get(name="Git")
+                    )
+
+                self.repository = test_repository
+
+            for i in range(1, users+1):
+                new_user = User.objects.create(
+                    username=self.randUsername(), #temp to avoid flushing
+                    #username="test"+str(i),
+                    first_name="Testing", last_name="Thomas",
+                    email="test@email.com",
+                    #default password = test1
+                    password="sha1$21fca$4ecf8335b1bd3331ad3f216c7a350297" + \
+                        "87be261a",
+                    is_staff=False, is_active=True, is_superuser=False,
+                    last_login="2011-01-16 21:47:17.529855",
+                    date_joined="2011-01-16 21:47:17.529855")
+
+                #Uncomment to set a custom password
+                #new_user.set_password('reviewboard1')
+                #new_user.save()
+
+                Profile.objects.create(
+                    user=new_user,
+                    first_time_setup_done=True, collapsed_diffs=True,
+                    wordwrapped_diffs=True, syntax_highlighting=True,
+                    show_submitted=True, sort_review_request_columns="",
+                    sort_dashboard_columns="", sort_submitter_columns="",
+                    sort_group_columns="", dashboard_columns="",
+                    submitter_columns="", group_columns="")
+
+
+                #Review Requests
+                if not num_of_requests == None:
+                    if len(num_of_requests)==1:
+                        req_val = num_of_requests[0]
+                    else:
+                        req_val = random.randrange(num_of_requests[0],
+                            num_of_requests[1])
+
+                    for k in range(1,req_val+1):
+                        review_request = ReviewRequest.objects.create(new_user,
+                            None)
+                        review_request.public=True
+                        review_request.summary="TEST v0.21 summary"
+                        review_request.description="TEST v0.21 is a description"
+                        review_request.shipit_count=0
+                        review_request.repository=test_repository
+                        #set the targeted reviewer to superuser or 1st defined
+                        review_request.target_people.add(
+                            User.objects.get(id__exact="1"))
+                        review_request.save()
+
+                        # ADD THE DIFFS IF ANY TO ADD
+                        if num_of_diffs:
+                            if len(num_of_diffs) == 1:
+                                diff_val = num_of_diffs[0]
+                            else:
+                                diff_val = random.randrange(num_of_diffs[0],
+                                    num_of_diffs[1])
+
+                            # CREATE THE DIFF DIRECTORY LOCATIONS
+                            diff_dir_tmp = str(os.path.abspath(sys.argv[0] +
+                                'manage.py/../reviews/management/' + \
+                                'commands/diffs'))
+                            if not os.path.exists(diff_dir_tmp):
+                                print >> sys.stderr, "The path to the " + \
+                                    "repository does not exist\n"
+                                self.stdout.write("dir: " + diff_dir_tmp)
+                                return
+                            diff_dir = diff_dir_tmp + '/' #add trailing slash
+
+                            #Get a list of the appropriate files
+                            files = []
+                            for chosen_file in os.listdir(diff_dir):
+                                if '.diff' in chosen_file:
+                                    files.append(chosen_file)
+
+                            #Check for any diffs
+                            if len(files) == 0:
+                                print >> sys.stderr, "There are no " + \
+                                    "diff files in this directory"
+                                return
+
+                            diffset_history = DiffSetHistory.objects.create(
+                                name='testDiffFile' + str(i))
+                            diffset_history.save()
+
+                            for j in range(0, diff_val):
+                                random_number = random.randint(0, len(files)-1)
+                                file_to_open = diff_dir + files[random_number]
+                                #TEMPORARY WRITE OUT DIFF TO OPEN
+                                self.stdout.write("open: " + file_to_open + \
+                                "\n")
+                                filename = open(file_to_open, 'r')
+                                form = UploadDiffForm(
+                                    review_request.repository, filename)
+                                form.create(filename, None, diffset_history)
+                                review_request.diffset_history = diffset_history
+                                review_request.publish(new_user)
+
+                #generate output as users & data is created
+                output = "username=" + new_user.username + ", userId=" + \
+                    str(new_user.id)
+
+                try:
+                   output += ", requests=" + str(req_val)
+                except NameError:
+                    pass
+
+                output += "\n"
+
+                self.stdout.write(output)
+
+
+    #Parse the values given in the command line
+    def parseCommand(self, com_arg, com_string):
+        try:
+            return tuple((int(item.strip()) for item in com_string.split(':')))
+        except ValueError:
+            print >> sys.stderr, "You failed to provide \"" + com_arg \
+                + "\" with two values of type int."
+            exit()
+
+
+    #Temporary function used to generate random usernames so no flushing needed
+    def randUsername(self):
+        alphabet = 'abcdefghijklmnopqrstuvwxyz'
+        min = 5
+        max = 7
+        string=''
+        for x in random.sample(alphabet,random.randint(min,max)):
+            string+=x
+        return string
+
diff --git a/reviewboard/reviews/management/commands/fill-database.py b/reviewboard/reviews/management/commands/fill-database.py
new file mode 100644
index 0000000..8f82da1
--- /dev/null
+++ b/reviewboard/reviews/management/commands/fill-database.py
@@ -0,0 +1,221 @@
+import os
+import random
+import sys
+from optparse import make_option
+
+from django import forms
+from django.contrib.auth.models import User
+from django.core.management.base import BaseCommand
+from django.core.management.base import NoArgsCommand
+
+from reviewboard.accounts.models import Profile
+from reviewboard.diffviewer.models import FileDiff, DiffSet, DiffSetHistory
+from reviewboard.diffviewer.forms import UploadDiffForm
+from reviewboard.reviews.models import ReviewRequest
+from reviewboard.scmtools.models import Repository, Tool
+
+
+class Command(NoArgsCommand):
+    help = 'Populates the database with the specified fields'
+
+    option_list = BaseCommand.option_list + (
+        make_option('-u', '--users', type="int", default=None, dest='users',
+            help='The number of users to add'),
+        make_option('--review-requests', default=None, dest='review-requests',
+            help='The number of review requests per user [min:max]'),
+        make_option('--diffs', default=None, dest='diffs',
+            help='The number of diff per review request [min:max]'),
+        make_option('--diff-comments', default=None, dest='diff-comments',
+            help='The number of comments per diff [min:max]')
+        )
+
+    def handle_noargs(self, **options):
+        users = options.get('users', None)
+        review_requests = options.get('review-requests', None)
+        diffs = options.get('diffs', None)
+        diff_comments = options.get('diff-comments', None)
+        num_of_requests = None
+        num_of_diffs = None
+        num_of_diff_comments = None
+        random.seed()
+
+        if review_requests:
+            num_of_requests = self.parseCommand("review_requests",
+                review_requests)
+
+            #TEMPORARY TEXT OUTPUT
+            if len(num_of_requests) == 1:
+                self.stdout.write("Each user gets exactly " \
+                    + str(num_of_requests[0]) + "requests\n")
+            else:
+                self.stdout.write("Review-request range: " \
+                    + str(num_of_requests[0]) + \
+                    " to " + str(num_of_requests[1]) + "\n" )
+
+        if diffs:
+            num_of_diffs = self.parseCommand("diffs", diffs)
+
+        if diff_comments:
+            num_of_diff_comments = self.parseCommand("diff-comments",
+                diff_comments)
+            #TEMPORARY OUTPUT
+            self.stdout.write("You entered a range from " + \
+                str(num_of_diff_comments) + \
+                " to " + str(num_of_diff_comments) + "\n")
+
+        if users:
+            #TEMPORARY OUTPUT
+            self.stdout.write("The number of users=" + str(users) + "\n")
+
+            if num_of_requests:
+                #path to the test repository based from this script
+                repo_dir = str(os.path.abspath(sys.argv[0] +
+                    'manage.py/../scmtools/testdata/git_repo'))
+                if not os.path.exists(repo_dir):
+                    self.stdout.write("The path to the repository does " + \
+                        "not exist\n")
+                    return
+
+                self.stdout.write("this is the repo directory:\n" + \
+                    repo_dir + "\n" )
+                self.stdout.write("SCMTOOL: " + \
+                    str(Tool.objects.get(name="Git")) + "\n")
+
+                #Setup a repository
+                test_repository = Repository.objects.create(
+                    name="Test Repository", path=repo_dir,
+                    tool=Tool.objects.get(name="Git")
+                    )
+
+                self.repository = test_repository
+
+            for i in range(1, users+1):
+                new_user = User.objects.create(
+                    username=self.randUsername(), #temp to avoid flushing
+                    #username="test"+str(i),
+                    first_name="Testing", last_name="Thomas",
+                    email="test@email.com",
+                    #default password = test1
+                    password="sha1$21fca$4ecf8335b1bd3331ad3f216c7a350297" + \
+                        "87be261a",
+                    is_staff=False, is_active=True, is_superuser=False,
+                    last_login="2011-01-16 21:47:17.529855",
+                    date_joined="2011-01-16 21:47:17.529855")
+
+                #Uncomment to set a custom password
+                #new_user.set_password('reviewboard1')
+                #new_user.save()
+
+                Profile.objects.create(
+                    user=new_user,
+                    first_time_setup_done=True, collapsed_diffs=True,
+                    wordwrapped_diffs=True, syntax_highlighting=True,
+                    show_submitted=True, sort_review_request_columns="",
+                    sort_dashboard_columns="", sort_submitter_columns="",
+                    sort_group_columns="", dashboard_columns="",
+                    submitter_columns="", group_columns="")
+
+
+                #Review Requests
+                if not num_of_requests == None:
+                    if len(num_of_requests)==1:
+                        req_val = num_of_requests[0]
+                    else:
+                        req_val = random.randrange(num_of_requests[0],
+                            num_of_requests[1])
+
+                    for k in range(1,req_val+1):
+                        review_request = ReviewRequest.objects.create(new_user,
+                            None)
+                        review_request.public=True
+                        review_request.summary="TEST v0.21 summary"
+                        review_request.description="TEST v0.21 is a description"
+                        review_request.shipit_count=0
+                        review_request.repository=test_repository
+                        #set the targeted reviewer to superuser or 1st defined
+                        review_request.target_people.add(
+                            User.objects.get(id__exact="1"))
+                        review_request.save()
+
+                        # ADD THE DIFFS IF ANY TO ADD
+                        if num_of_diffs:
+                            if len(num_of_diffs) == 1:
+                                diff_val = num_of_diffs[0]
+                            else:
+                                diff_val = random.randrange(num_of_diffs[0],
+                                    num_of_diffs[1])
+
+                            # CREATE THE DIFF DIRECTORY LOCATIONS
+                            diff_dir_tmp = str(os.path.abspath(sys.argv[0] +
+                                'manage.py/../reviews/management/' + \
+                                'commands/diffs'))
+                            if not os.path.exists(diff_dir_tmp):
+                                print >> sys.stderr, "The path to the " + \
+                                    "repository does not exist\n"
+                                self.stdout.write("dir: " + diff_dir_tmp)
+                                return
+                            diff_dir = diff_dir_tmp + '/' #add trailing slash
+
+                            #Get a list of the appropriate files
+                            files = []
+                            for chosen_file in os.listdir(diff_dir):
+                                if '.diff' in chosen_file:
+                                    files.append(chosen_file)
+
+                            #Check for any diffs
+                            if len(files) == 0:
+                                print >> sys.stderr, "There are no " + \
+                                    "diff files in this directory"
+                                return
+
+                            diffset_history = DiffSetHistory.objects.create(
+                                name='testDiffFile' + str(i))
+                            diffset_history.save()
+
+                            for j in range(0, diff_val):
+                                random_number = random.randint(0, len(files)-1)
+                                file_to_open = diff_dir + files[random_number]
+                                #TEMPORARY WRITE OUT DIFF TO OPEN
+                                self.stdout.write("open: " + file_to_open + \
+                                "\n")
+                                filename = open(file_to_open, 'r')
+                                form = UploadDiffForm(
+                                    review_request.repository, filename)
+                                form.create(filename, None, diffset_history)
+                                review_request.diffset_history = diffset_history
+                                review_request.publish(new_user)
+
+                #generate output as users & data is created
+                output = "username=" + new_user.username + ", userId=" + \
+                    str(new_user.id)
+
+                try:
+                   output += ", requests=" + str(req_val)
+                except NameError:
+                    pass
+
+                output += "\n"
+
+                self.stdout.write(output)
+
+
+    #Parse the values given in the command line
+    def parseCommand(self, com_arg, com_string):
+        try:
+            return tuple((int(item.strip()) for item in com_string.split(':')))
+        except ValueError:
+            print >> sys.stderr, "You failed to provide \"" + com_arg \
+                + "\" with two values of type int."
+            exit()
+
+
+    #Temporary function used to generate random usernames so no flushing needed
+    def randUsername(self):
+        alphabet = 'abcdefghijklmnopqrstuvwxyz'
+        min = 5
+        max = 7
+        string=''
+        for x in random.sample(alphabet,random.randint(min,max)):
+            string+=x
+        return string
+
