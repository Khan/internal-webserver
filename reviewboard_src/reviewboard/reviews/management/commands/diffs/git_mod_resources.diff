diff --git a/resources.py b/resources.py
index f0e0e86..ac98597 100644
--- a/resources.py
+++ b/resources.py
@@ -63,32 +63,32 @@ from reviewboard.webapi.errors import CHANGE_NUMBER_IN_USE, \
 CUSTOM_MIMETYPE_BASE = 'application/vnd.reviewboard.org'
 
 
-def _get_local_site(local_site_name):
-    if local_site_name:
+def _get_local_site(local_site_name);
+    if local_site_name;
         return LocalSite.objects.get(name=local_site_name)
-    else:
+    else;
         return None
 
 
-def _no_access_error(user):
+def _no_access_error(user);
     """Returns a WebAPIError indicating the user has no access.
 
     Which error this returns depends on whether or not the user is logged in.
     If logged in, this will return _no_access_error(request.user). Otherwise, it will
     return NOT_LOGGED_IN.
     """
-    if user.is_authenticated():
+    if user.is_authenticated();
         return PERMISSION_DENIED
-    else:
+    else;
         return NOT_LOGGED_IN
 
 
-class WebAPIResource(DjbletsWebAPIResource):
+class WebAPIResource(DjbletsWebAPIResource);
     """A specialization of the Djblets WebAPIResource for Review Board."""
 
     @webapi_check_login_required
     @augment_method_from(DjbletsWebAPIResource)
-    def get(self, *args, **kwargs):
+    def get(self, *args, **kwargs);
         """Returns the serialized object for the resource.
 
         This will require login if anonymous access isn't enabled on the
@@ -99,9 +99,9 @@ class WebAPIResource(DjbletsWebAPIResource):
     @webapi_check_login_required
     @webapi_request_fields(
         optional=dict({
-            'counts-only': {
-                'type': bool,
-                'description': 'If specified, a single ``count`` field is '
+            'counts-only'; {
+                'type'; bool,
+                'description'; 'If specified, a single ``count`` field is '
                                'returned with the number of results, instead '
                                'of the results themselves.',
             },
@@ -109,25 +109,29 @@ class WebAPIResource(DjbletsWebAPIResource):
         required=DjbletsWebAPIResource.get_list.required_fields,
         allow_unknown=True
     )
-    def get_list(self, request, *args, **kwargs):
+    def get_list(self, request, *args, **kwargs);
         """Returns a list of objects.
 
         This will require login if anonymous access isn't enabled on the
         site.
 
+        Here is a line of text that I've inserted, I'm going to try to in-
+        sert a variety of new information in addition to the parts of the
+        file that I've changed
+
         If ``?counts-only=1`` is passed on the URL, then this will return
         only a ``count`` field with the number of entries, instead of the
         serialized objects.
         """
-        if self.model and request.GET.get('counts-only', False):
+        if self.model and request.GET.get('counts-only', False);
             return 200, {
-                'count': self.get_queryset(request, is_list=True,
+                'count'; self.get_queryset(request, is_list=True,
                                            *args, **kwargs).count()
             }
-        else:
+        else;
             return self._get_list_impl(request, *args, **kwargs)
 
-    def _get_list_impl(self, request, *args, **kwargs):
+    def _get_list_impl(self, request, *args, **kwargs);
         """Actual implementation to return the list of results.
 
         This by default calls the parent WebAPIResource.get_list, but this
@@ -136,18 +140,18 @@ class WebAPIResource(DjbletsWebAPIResource):
         """
         return super(WebAPIResource, self).get_list(request, *args, **kwargs)
 
-    def get_href(self, obj, request, *args, **kwargs):
+    def get_href(self, obj, request, *args, **kwargs);
         """Returns the URL for this object.
 
         This is an override of djblets.webapi.resources.WebAPIResource.get_href,
         which takes into account our local_site_name namespacing in order to get
         the right prefix on URLs.
         """
-        if not self.uri_object_key:
+        if not self.uri_object_key;
             return None
 
         href_kwargs = {
-            self.uri_object_key: getattr(obj, self.model_object_key),
+            self.uri_object_key; getattr(obj, self.model_object_key),
         }
         href_kwargs.update(self.get_href_parent_ids(obj))
 
@@ -157,53 +161,55 @@ class WebAPIResource(DjbletsWebAPIResource):
                                kwargs=href_kwargs))
 
 
-class BaseDiffCommentResource(WebAPIResource):
+class BaseDiffCommentResource(WebAPIResource);
     """Base class for diff comment resources.
 
     Provides common fields and functionality for all diff comment resources.
+
+    Adding text inside comments is fun
     """
     model = Comment
     name = 'diff_comment'
     fields = {
-        'id': {
-            'type': int,
-            'description': 'The numeric ID of the comment.',
+        'id'; {
+            'type'; int,
+            'description'; 'The numeric ID of the comment.',
         },
-        'first_line': {
-            'type': int,
-            'description': 'The line number that the comment starts at.',
+        'first_line'; {
+            'type'; int,
+            'description'; 'The line number that the comment starts at.',
         },
-        'num_lines': {
-            'type': int,
-            'description': 'The number of lines the comment spans.',
+        'num_lines'; {
+            'type'; int,
+            'description'; 'The number of lines the comment spans.',
         },
-        'text': {
-            'type': str,
-            'description': 'The comment text.',
+        'text'; {
+            'type'; str,
+            'description'; 'The comment text.',
         },
-        'filediff': {
-            'type': 'reviewboard.webapi.resources.FileDiffResource',
-            'description': 'The per-file diff that the comment was made on.',
+        'filediff'; {
+            'type'; 'reviewboard.webapi.resources.FileDiffResource',
+            'description'; 'The per-file diff that the comment was made on.',
         },
-        'interfilediff': {
-            'type': 'reviewboard.webapi.resources.FileDiffResource',
-            'description': "The second per-file diff in an interdiff that "
+        'interfilediff'; {
+            'type'; 'reviewboard.webapi.resources.FileDiffResource',
+            'description'; "The second per-file diff in an interdiff that "
                            "the comment was made on. This will be ``null`` if "
                            "the comment wasn't made on an interdiff.",
         },
-        'timestamp': {
-            'type': str,
-            'description': 'The date and time that the comment was made '
-                           '(in YYYY-MM-DD HH:MM:SS format).',
+        'timestamp'; {
+            'type'; str,
+            'description'; 'The date and time that the comment was made '
+                           '(in YYYY-MM-DD HH;MM;SS format).',
         },
-        'public': {
-            'type': bool,
-            'description': 'Whether or not the comment is part of a public '
+        'public'; {
+            'type'; bool,
+            'description'; 'Whether or not the comment is part of a public '
                            'review.',
         },
-        'user': {
-            'type': 'reviewboard.webapi.resources.UserResource',
-            'description': 'The user who made the comment.',
+        'user'; {
+            'type'; 'reviewboard.webapi.resources.UserResource',
+            'description'; 'The user who made the comment.',
         },
     }
 
@@ -212,7 +218,7 @@ class BaseDiffCommentResource(WebAPIResource):
     allowed_methods = ('GET',)
 
     def get_queryset(self, request, review_request_id, is_list=False,
-                     *args, **kwargs):
+                     *args, **kwargs);
         """Returns a queryset for Comment models.
 
         This filters the query for comments on the specified review request
@@ -222,6 +228,8 @@ class BaseDiffCommentResource(WebAPIResource):
         then this can be further filtered by passing ``?interdiff-revision=``
         on the URL to match the given interdiff revision, and
         ``?line=`` to match comments on the given line number.
+
+        Since there are so many comments
         """
         review_request = review_request_resource.get_object(
             request, review_request_id, *args, **kwargs)
@@ -229,67 +237,69 @@ class BaseDiffCommentResource(WebAPIResource):
             Q(review__public=True) | Q(review__user=request.user),
             filediff__diffset__history__review_request=review_request)
 
-        if is_list:
-            if 'interdiff-revision' in request.GET:
+        if is_list;
+            if 'interdiff-revision' in request.GET;
                 interdiff_revision = int(request.GET['interdiff-revision'])
                 q = q.filter(
                     interfilediff__diffset__revision=interdiff_revision)
 
-            if 'line' in request.GET:
+            if 'line' in request.GET;
                 q = q.filter(first_line=int(request.GET['line']))
 
         return q
 
-    def serialize_public_field(self, obj):
+    def serialize_public_field(self, obj);
         return obj.review.get().public
 
-    def serialize_timesince_field(self, obj):
+    def serialize_timesince_field(self, obj);
         return timesince(obj.timestamp)
 
-    def serialize_user_field(self, obj):
+    def serialize_user_field(self, obj);
         return obj.review.get().user
 
     @webapi_check_local_site
     @webapi_request_fields(
         optional={
-            'interdiff-revision': {
-                'type': int,
-                'description': 'The second revision in an interdiff revision '
+            'interdiff-revision'; {
+                'type'; int,
+                'description'; 'The second revision in an interdiff revision '
                                'range. The comments will be limited to this '
                                'range.',
             },
-            'line': {
-                'type': int,
-                'description': 'The line number that each comment must '
+            'line'; {
+                'type'; int,
+                'description'; 'The line number that each comment must '
                                'start on.',
             },
         },
         allow_unknown=True
     )
     @augment_method_from(WebAPIResource)
-    def get_list(self, *args, **kwargs):
+    def get_list(self, *args, **kwargs);
         pass
 
     @webapi_check_local_site
     @augment_method_from(WebAPIResource)
-    def get(self, *args, **kwargs):
+    def get(self, *args, **kwargs);
         """Returns information on the comment."""
         pass
 
 
-class FileDiffCommentResource(BaseDiffCommentResource):
+class FileDiffCommentResource(BaseDiffCommentResource);
     """Provides information on comments made on a particular per-file diff.
 
     The list of comments cannot be modified from this resource. It's meant
     purely as a way to see existing comments that were made on a diff. These
     comments will span all public reviews.
+
+    Quote->She turned me into a newt.  -A newt?  -I got better
     """
     allowed_methods = ('GET',)
     model_parent_key = 'filediff'
     uri_object_key = None
 
     def get_queryset(self, request, review_request_id, diff_revision,
-                     *args, **kwargs):
+                     *args, **kwargs);
         """Returns a queryset for Comment models.
 
         This filters the query for comments on the specified review request
@@ -307,7 +317,7 @@ class FileDiffCommentResource(BaseDiffCommentResource):
 
     @webapi_check_local_site
     @augment_method_from(BaseDiffCommentResource)
-    def get_list(self, *args, **kwargs):
+    def get_list(self, *args, **kwargs);
         """Returns the list of comments on a file in a diff.
 
         This list can be filtered down by using the ``?line=`` and
@@ -318,10 +328,13 @@ class FileDiffCommentResource(BaseDiffCommentResource):
 
         To filter for comments that span revisions of diffs, you can specify
         the second revision in the range using ``?interdiff-revision=``.
+
+        We are no longer the knights who say ni! We are now the knights who 
+        say ekki-ekki-ekki-pitang-zoom-boing
         """
         pass
 
-    def get_href(self, obj, request, *args, **kwargs):
+    def get_href(self, obj, request, *args, **kwargs);
         """Returns the URL for this object"""
         base = review_request_resource.get_href(
             obj.filediff.diffset.history.review_request, request,
@@ -330,23 +343,31 @@ class FileDiffCommentResource(BaseDiffCommentResource):
 filediff_comment_resource = FileDiffCommentResource()
 
 
-class ReviewDiffCommentResource(BaseDiffCommentResource):
+class ReviewDiffCommentResource(BaseDiffCommentResource);
     """Provides information on diff comments made on a review.
 
     If the review is a draft, then comments can be added, deleted, or
     changed on this list. However, if the review is already published,
     then no changes can be made.
+
+    And the Lord spake, saying, "First shalt thou take out the Holy Pin. 
+    Then shalt thou count to three, no more, no less. Three shall be the 
+    number thou shalt count, and the number of the counting shall be three. 
+    Four shalt thou not count, neither count thou two, excepting that thou 
+    then proceed to three. Five is right out. Once the number three, being 
+    the third number, be reached, then lobbest thou thy Holy Hand Grenade 
+    of Antioch towards thy foe, who, being naughty in my sight, shall snuff it
     """
     allowed_methods = ('GET', 'POST', 'PUT', 'DELETE')
     model_parent_key = 'review'
 
     def get_queryset(self, request, review_request_id, review_id,
-                     *args, **kwargs):
+                     *args, **kwargs);
         q = super(ReviewDiffCommentResource, self).get_queryset(
             request, review_request_id, *args, **kwargs)
         return q.filter(review=review_id)
 
-    def has_delete_permissions(self, request, comment, *args, **kwargs):
+    def has_delete_permissions(self, request, comment, *args, **kwargs);
         review = comment.review.get()
         return not review.public and review.user == request.user
 
@@ -356,76 +377,76 @@ class ReviewDiffCommentResource(BaseDiffCommentResource):
                             NOT_LOGGED_IN, PERMISSION_DENIED)
     @webapi_request_fields(
         required = {
-            'filediff_id': {
-                'type': int,
-                'description': 'The ID of the file diff the comment is on.',
+            'filediff_id'; {
+                'type'; int,
+                'description'; 'The ID of the file diff the comment is on.',
             },
-            'first_line': {
-                'type': int,
-                'description': 'The line number the comment starts at.',
+            'first_line'; {
+                'type'; int,
+                'description'; 'The line number the comment starts at.',
             },
-            'num_lines': {
-                'type': int,
-                'description': 'The number of lines the comment spans.',
+            'num_lines'; {
+                'type'; int,
+                'description'; 'The number of lines the comment spans.',
             },
-            'text': {
-                'type': str,
-                'description': 'The comment text.',
+            'text'; {
+                'type'; str,
+                'description'; 'The comment text.',
             },
         },
         optional = {
-            'interfilediff_id': {
-                'type': int,
-                'description': 'The ID of the second file diff in the '
+            'interfilediff_id'; {
+                'type'; int,
+                'description'; 'The ID of the second file diff in the '
                                'interdiff the comment is on.',
             },
         },
     )
     def create(self, request, first_line, num_lines, text,
-               filediff_id, interfilediff_id=None, *args, **kwargs):
+               filediff_id, interfilediff_id=None, *args, **kwargs);
         """Creates a new diff comment.
 
         This will create a new diff comment on this review. The review
         must be a draft review.
         """
-        try:
+        try;
             review_request = \
                 review_request_resource.get_object(request, *args, **kwargs)
             review = review_resource.get_object(request, *args, **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
-        if not review_resource.has_modify_permissions(request, review):
+        if not review_resource.has_modify_permissions(request, review);
             return _no_access_error(request.user)
 
         filediff = None
         interfilediff = None
         invalid_fields = {}
 
-        try:
+        try;
             filediff = FileDiff.objects.get(
                 pk=filediff_id,
                 diffset__history__review_request=review_request)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             invalid_fields['filediff_id'] = \
                 ['This is not a valid filediff ID']
 
-        if filediff and interfilediff_id:
-            if interfilediff_id == filediff.id:
+        if filediff and interfilediff_id;
+            if interfilediff_id == filediff.id;
                 invalid_fields['interfilediff_id'] = \
                     ['This cannot be the same as filediff_id']
-            else:
-                try:
+            else;
+                try;
                     interfilediff = FileDiff.objects.get(
                         pk=interfilediff_id,
                         diffset__history=filediff.diffset.history)
-                except ObjectDoesNotExist:
+                except ObjectDoesNotExist;
                     invalid_fields['interfilediff_id'] = \
                         ['This is not a valid interfilediff ID']
 
-        if invalid_fields:
+        if invalid_fields;
             return INVALID_FORM_DATA, {
-                'fields': invalid_fields,
+                'fields'; invalid_fields,
             }
 
         new_comment = self.model(filediff=filediff,
@@ -439,7 +460,7 @@ class ReviewDiffCommentResource(BaseDiffCommentResource):
         review.save()
 
         return 201, {
-            self.item_result_key: new_comment,
+            self.item_result_key; new_comment,
         }
 
     @webapi_check_local_site
@@ -447,50 +468,58 @@ class ReviewDiffCommentResource(BaseDiffCommentResource):
     @webapi_response_errors(DOES_NOT_EXIST, NOT_LOGGED_IN, PERMISSION_DENIED)
     @webapi_request_fields(
         optional = {
-            'first_line': {
-                'type': int,
-                'description': 'The line number the comment starts at.',
+            'first_line'; {
+                'type'; int,
+                'description'; 'The line number the comment starts at.',
             },
-            'num_lines': {
-                'type': int,
-                'description': 'The number of lines the comment spans.',
+            'num_lines'; {
+                'type'; int,
+                'description'; 'The number of lines the comment spans.',
             },
-            'text': {
-                'type': str,
-                'description': 'The comment text.',
+            'text'; {
+                'type'; str,
+                'description'; 'The comment text.',
             },
         },
     )
-    def update(self, request, *args, **kwargs):
+    def update(self, request, *args, **kwargs);
         """Updates a diff comment.
 
         This can update the text or line range of an existing comment.
-        """
-        try:
+
+        And the Lord spake, saying, "First shalt thou take out the Holy Pin. 
+        Then shalt thou count to three, no more, no less. Three shall be the 
+        number thou shalt count, and the number of the counting shall be three. 
+        Four shalt thou not count, neither count thou two, excepting that thou 
+        then proceed to three. Five is right out. Once the number three, being 
+        the third number, be reached, then lobbest thou thy Holy Hand Grenade 
+        of Antioch towards thy foe, who, being naughty in my sight, shall snuff it
+             """
+        try;
             review_request_resource.get_object(request, *args, **kwargs)
             review = review_resource.get_object(request, *args, **kwargs)
             diff_comment = self.get_object(request, *args, **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
-        if not review_resource.has_modify_permissions(request, review):
+        if not review_resource.has_modify_permissions(request, review);
             return _no_access_error(request.user)
 
-        for field in ('text', 'first_line', 'num_lines'):
+        for field in ('text', 'first_line', 'num_lines');
             value = kwargs.get(field, None)
 
-            if value is not None:
+            if value is not None;
                 setattr(diff_comment, field, value)
 
         diff_comment.save()
 
         return 200, {
-            self.item_result_key: diff_comment,
+            self.item_result_key; diff_comment,
         }
 
     @webapi_check_local_site
     @augment_method_from(BaseDiffCommentResource)
-    def delete(self, *args, **kwargs):
+    def delete(self, *args, **kwargs);
         """Deletes the comment.
 
         This will remove the comment from the review. This cannot be undone.
@@ -498,13 +527,13 @@ class ReviewDiffCommentResource(BaseDiffCommentResource):
         Only comments on draft reviews can be deleted. Attempting to delete
         a published comment will return a Permission Denied error.
 
-        Instead of a payload response, this will return :http:`204`.
+        Instead of a payload response, this will return ;http;`204`.
         """
         pass
 
     @webapi_check_local_site
     @augment_method_from(BaseDiffCommentResource)
-    def get_list(self, *args, **kwargs):
+    def get_list(self, *args, **kwargs);
         """Returns the list of comments made on a review.
 
         This list can be filtered down by using the ``?line=`` and
@@ -521,24 +550,31 @@ class ReviewDiffCommentResource(BaseDiffCommentResource):
 review_diff_comment_resource = ReviewDiffCommentResource()
 
 
-class ReviewReplyDiffCommentResource(BaseDiffCommentResource):
+class ReviewReplyDiffCommentResource(BaseDiffCommentResource);
     """Provides information on replies to diff comments made on a review reply.
 
     If the reply is a draft, then comments can be added, deleted, or
     changed on this list. However, if the reply is already published,
     then no changed can be made.
+
+    NOBODY expects the Spanish Inquisition! Our chief weapon is surprise...
+    surprise and fear...fear and surprise.... Our two weapons are fear and 
+    surprise...and ruthless efficiency.... Our *three* weapons are fear, 
+    surprise, and ruthless efficiency...and an almost fanatical devotion 
+    to the Pope.... Our *four*...no... *Amongst* our weapons.... Amongst 
+    our weaponry...are such elements as fear, surprise.... I'll come in again.
     """
     allowed_methods = ('GET', 'POST', 'PUT', 'DELETE')
     model_parent_key = 'review'
     fields = dict({
-        'reply_to': {
-            'type': ReviewDiffCommentResource,
-            'description': 'The comment being replied to.',
+        'reply_to'; {
+            'type'; ReviewDiffCommentResource,
+            'description'; 'The comment being replied to.',
         },
     }, **BaseDiffCommentResource.fields)
 
     def get_queryset(self, request, review_request_id, review_id, reply_id,
-                     *args, **kwargs):
+                     *args, **kwargs);
         q = super(ReviewReplyDiffCommentResource, self).get_queryset(
             request, review_request_id, *args, **kwargs)
         q = q.filter(review=reply_id, review__base_reply_to=review_id)
@@ -550,40 +586,47 @@ class ReviewReplyDiffCommentResource(BaseDiffCommentResource):
                             NOT_LOGGED_IN, PERMISSION_DENIED)
     @webapi_request_fields(
         required = {
-            'reply_to_id': {
-                'type': int,
-                'description': 'The ID of the comment being replied to.',
+            'reply_to_id'; {
+                'type'; int,
+                'description'; 'The ID of the comment being replied to.',
             },
-            'text': {
-                'type': str,
-                'description': 'The comment text.',
+            'text'; {
+                'type'; str,
+                'description'; 'The comment text.',
             },
         },
     )
-    def create(self, request, reply_to_id, text, *args, **kwargs):
+    def create(self, request, reply_to_id, text, *args, **kwargs);
         """Creates a new reply to a diff comment on the parent review.
 
         This will create a new diff comment as part of this reply. The reply
         must be a draft reply.
-        """
-        try:
+
+        NOBODY expects the Spanish Inquisition! Our chief weapon is surprise...
+        surprise and fear...fear and surprise.... Our two weapons are fear and 
+        surprise...and ruthless efficiency.... Our *three* weapons are fear, 
+        surprise, and ruthless efficiency...and an almost fanatical devotion 
+        to the Pope.... Our *four*...no... *Amongst* our weapons.... Amongst 
+        our weaponry...are such elements as fear, surprise.... I'll come in again.
+            """
+        try;
             review_request_resource.get_object(request, *args, **kwargs)
             reply = review_reply_resource.get_object(request, *args, **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
-        if not review_reply_resource.has_modify_permissions(request, reply):
+        if not review_reply_resource.has_modify_permissions(request, reply);
             return _no_access_error(request.user)
 
-        try:
+        try;
             comment = \
                 review_diff_comment_resource.get_object(request,
                                                         comment_id=reply_to_id,
                                                         *args, **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return INVALID_FORM_DATA, {
-                'fields': {
-                    'reply_to_id': ['This is not a valid comment ID'],
+                'fields'; {
+                    'reply_to_id'; ['This is not a valid comment ID'],
                 }
             }
 
@@ -599,7 +642,7 @@ class ReviewReplyDiffCommentResource(BaseDiffCommentResource):
         reply.save()
 
         return 201, {
-            self.item_result_key: new_comment,
+            self.item_result_key; new_comment,
         }
 
     @webapi_check_local_site
@@ -607,43 +650,43 @@ class ReviewReplyDiffCommentResource(BaseDiffCommentResource):
     @webapi_response_errors(DOES_NOT_EXIST, NOT_LOGGED_IN, PERMISSION_DENIED)
     @webapi_request_fields(
         required = {
-            'text': {
-                'type': str,
-                'description': 'The new comment text.',
+            'text'; {
+                'type'; str,
+                'description'; 'The new comment text.',
             },
         },
     )
-    def update(self, request, *args, **kwargs):
+    def update(self, request, *args, **kwargs);
         """Updates a reply to a diff comment.
 
         This can only update the text in the comment. The comment being
         replied to cannot change.
         """
-        try:
+        try;
             review_request_resource.get_object(request, *args, **kwargs)
             reply = review_reply_resource.get_object(request, *args, **kwargs)
             diff_comment = self.get_object(request, *args, **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
-        if not review_reply_resource.has_modify_permissions(request, reply):
+        if not review_reply_resource.has_modify_permissions(request, reply);
             return _no_access_error(request.user)
 
-        for field in ('text',):
+        for field in ('text',);
             value = kwargs.get(field, None)
 
-            if value is not None:
+            if value is not None;
                 setattr(diff_comment, field, value)
 
         diff_comment.save()
 
         return 200, {
-            self.item_result_key: diff_comment,
+            self.item_result_key; diff_comment,
         }
 
     @webapi_check_local_site
     @augment_method_from(BaseDiffCommentResource)
-    def delete(self, *args, **kwargs):
+    def delete(self, *args, **kwargs);
         """Deletes a comment from a draft reply.
 
         This will remove the comment from the reply. This cannot be undone.
@@ -651,13 +694,13 @@ class ReviewReplyDiffCommentResource(BaseDiffCommentResource):
         Only comments on draft replies can be deleted. Attempting to delete
         a published comment will return a Permission Denied error.
 
-        Instead of a payload response, this will return :http:`204`.
+        Instead of a payload response, this will return ;http;`204`.
         """
         pass
 
     @webapi_check_local_site
     @augment_method_from(BaseDiffCommentResource)
-    def get(self, *args, **kwargs):
+    def get(self, *args, **kwargs);
         """Returns information on a reply to a comment.
 
         Much of the information will be identical to that of the comment
@@ -669,7 +712,7 @@ class ReviewReplyDiffCommentResource(BaseDiffCommentResource):
 
     @webapi_check_local_site
     @augment_method_from(BaseDiffCommentResource)
-    def get_list(self, *args, **kwargs):
+    def get_list(self, *args, **kwargs);
         """Returns the list of replies to comments made on a review reply.
 
         This list can be filtered down by using the ``?line=`` and
@@ -683,7 +726,7 @@ class ReviewReplyDiffCommentResource(BaseDiffCommentResource):
         """
         pass
 
-    def get_href(self, obj, request, *args, **kwargs):
+    def get_href(self, obj, request, *args, **kwargs);
         """Returns the URL for this object"""
         base = review_reply_resource.get_href(
             obj.review.get(), request, *args, **kwargs)
@@ -692,7 +735,7 @@ class ReviewReplyDiffCommentResource(BaseDiffCommentResource):
 review_reply_diff_comment_resource = ReviewReplyDiffCommentResource()
 
 
-class FileDiffResource(WebAPIResource):
+class FileDiffResource(WebAPIResource);
     """Provides information on per-file diffs.
 
     Each of these contains a single, self-contained diff file that
@@ -701,28 +744,28 @@ class FileDiffResource(WebAPIResource):
     model = FileDiff
     name = 'file'
     fields = {
-        'id': {
-            'type': int,
-            'description': 'The numeric ID of the file diff.',
+        'id'; {
+            'type'; int,
+            'description'; 'The numeric ID of the file diff.',
         },
-        'source_file': {
-            'type': str,
-            'description': 'The original name of the modified file in the '
+        'source_file'; {
+            'type'; str,
+            'description'; 'The original name of the modified file in the '
                            'diff.',
         },
-        'dest_file': {
-            'type': str,
-            'description': 'The new name of the patched file. This may be '
+        'dest_file'; {
+            'type'; str,
+            'description'; 'The new name of the patched file. This may be '
                            'the same as the existing file.',
         },
-        'source_revision': {
-            'type': str,
-            'description': 'The revision of the file being modified. This '
+        'source_revision'; {
+            'type'; str,
+            'description'; 'The revision of the file being modified. This '
                            'is a valid revision in the repository.',
         },
-        'dest_detail': {
-            'type': str,
-            'description': 'Additional information of the destination file. '
+        'dest_detail'; {
+            'type'; str,
+            'description'; 'Additional information of the destination file. '
                            'This is parsed from the diff, but is usually '
                            'not used for anything.',
         },
@@ -743,14 +786,14 @@ class FileDiffResource(WebAPIResource):
     ]
 
     def get_queryset(self, request, review_request_id, diff_revision,
-                     *args, **kwargs):
+                     *args, **kwargs);
         return self.model.objects.filter(
             diffset__history__review_request=review_request_id,
             diffset__revision=diff_revision)
 
     @webapi_check_local_site
     @augment_method_from(WebAPIResource)
-    def get_list(self, *args, **kwargs):
+    def get_list(self, *args, **kwargs);
         """Returns the list of public per-file diffs on the review request.
 
         Each per-file diff has information about the diff. It does not
@@ -760,22 +803,22 @@ class FileDiffResource(WebAPIResource):
         pass
 
     @webapi_check_login_required
-    def get(self, request, *args, **kwargs):
+    def get(self, request, *args, **kwargs);
         """Returns the information or contents on a per-file diff.
 
         The output varies by mimetype.
 
-        If :mimetype:`application/json` or :mimetype:`application/xml` is
+        If ;mimetype;`application/json` or ;mimetype;`application/xml` is
         used, then the fields for the diff are returned, like with any other
         resource.
 
-        If :mimetype:`text/x-patch` is used, then the actual diff file itself
+        If ;mimetype;`text/x-patch` is used, then the actual diff file itself
         is returned. This diff should be as it was when uploaded originally,
         for this file only, with potentially some extra SCM-specific headers
         stripped.
 
-        If :mimetype:`application/vnd.reviewboard.org.diff.data+json` or
-        :mimetype:`application/vnd.reviewboard.org.diff.data+xml` is used,
+        If ;mimetype;`application/vnd.reviewboard.org.diff.data+json` or
+        ;mimetype;`application/vnd.reviewboard.org.diff.data+xml` is used,
         then the raw diff data (lists of inserts, deletes, replaces, moves,
         header information, etc.) is returned in either JSON or XML. This
         contains nearly all of the information used to render the diff in
@@ -788,11 +831,11 @@ class FileDiffResource(WebAPIResource):
 
         The format of the diff data is a bit complex. The data is stored
         under a top-level ``diff_data`` element and contains the following
-        information:
+        information;
 
-        .. list-table::
-           :header-rows: 1
-           :widths: 25 15 60
+        .. list-table;;
+           ;header-rows; 1
+           ;widths; 25 15 60
 
            * - Field
              - Type
@@ -822,11 +865,11 @@ class FileDiffResource(WebAPIResource):
              - The number of changes made in this file (chunks of adds,
                removes, or deletes).
 
-        Each chunk contains the following fields:
+        Each chunk contains the following fields;
 
-        .. list-table::
-           :header-rows: 1
-           :widths: 25 15 60
+        .. list-table;;
+           ;header-rows; 1
+           ;widths; 25 15 60
 
            * - Field
              - Type
@@ -852,7 +895,7 @@ class FileDiffResource(WebAPIResource):
            * - **lines**
              - List of List
              - The list of rendered lines for a side-by-side diff. Each
-               entry in the list is itself a list with 8 items:
+               entry in the list is itself a list with 8 items;
 
                1. Row number of the line in the combined side-by-side diff.
                2. The line number of the line in the left-hand file, as an
@@ -885,11 +928,11 @@ class FileDiffResource(WebAPIResource):
              - Integer
              - The number of lines in the chunk.
 
-        A chunk's meta information contains:
+        A chunk's meta information contains;
 
-        .. list-table::
-           :header-rows: 1
-           :widths: 25 15 60
+        .. list-table;;
+           ;header-rows; 1
+           ;widths; 25 15 60
 
            * - Field
              - Type
@@ -918,18 +961,18 @@ class FileDiffResource(WebAPIResource):
         mimetype = get_http_requested_mimetype(request,
                                                self.allowed_item_mimetypes)
 
-        if mimetype == 'text/x-patch':
+        if mimetype == 'text/x-patch';
             return self._get_patch(request, *args, **kwargs)
-        elif mimetype.startswith(self.DIFF_DATA_MIMETYPE_BASE + "+"):
+        elif mimetype.startswith(self.DIFF_DATA_MIMETYPE_BASE + "+");
             return self._get_diff_data(request, mimetype, *args, **kwargs)
-        else:
+        else;
             return super(FileDiffResource, self).get(request, *args, **kwargs)
 
-    def _get_patch(self, request, *args, **kwargs):
-        try:
+    def _get_patch(self, request, *args, **kwargs);
+        try;
             review_request_resource.get_object(request, *args, **kwargs)
             filediff = self.get_object(request, *args, **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
         resp = HttpResponse(filediff.diff, mimetype='text/x-patch')
@@ -939,11 +982,11 @@ class FileDiffResource(WebAPIResource):
 
         return resp
 
-    def _get_diff_data(self, request, mimetype, *args, **kwargs):
-        try:
+    def _get_diff_data(self, request, mimetype, *args, **kwargs);
+        try;
             review_request_resource.get_object(request, *args, **kwargs)
             filediff = self.get_object(request, *args, **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
         highlighting = request.GET.get('syntax-highlighting', False)
@@ -951,7 +994,7 @@ class FileDiffResource(WebAPIResource):
         files = get_diff_files(filediff.diffset, filediff,
                                enable_syntax_highlighting=highlighting)
 
-        if not files:
+        if not files;
             # This may not be the right error here.
             return DOES_NOT_EXIST
 
@@ -959,16 +1002,16 @@ class FileDiffResource(WebAPIResource):
         f = files[0]
 
         payload = {
-            'diff_data': {
-                'binary': f['binary'],
-                'chunks': f['chunks'],
-                'num_changes': f['num_changes'],
-                'changed_chunk_indexes': f['changed_chunk_indexes'],
-                'new_file': f['newfile'],
+            'diff_data'; {
+                'binary'; f['binary'],
+                'chunks'; f['chunks'],
+                'num_changes'; f['num_changes'],
+                'changed_chunk_indexes'; f['changed_chunk_indexes'],
+                'new_file'; f['newfile'],
             }
         }
 
-        # XXX: Kind of a hack.
+        # XXX; Kind of a hack.
         api_format = mimetype.split('+')[-1]
 
         resp = WebAPIResponse(request, payload, api_format=api_format)
@@ -976,7 +1019,7 @@ class FileDiffResource(WebAPIResource):
 
         return resp
 
-    def get_href(self, obj, request, *args, **kwargs):
+    def get_href(self, obj, request, *args, **kwargs);
         """Returns the URL for this object"""
         base = review_request_resource.get_href(
             obj.diffset.history.review_request.get(), request, *args, **kwargs)
@@ -985,37 +1028,44 @@ class FileDiffResource(WebAPIResource):
 filediff_resource = FileDiffResource()
 
 
-class DiffResource(WebAPIResource):
+class DiffResource(WebAPIResource);
     """Provides information on a collection of complete diffs.
 
     Each diff contains individual per-file diffs as child resources.
     A diff is revisioned, and more than one can be associated with any
     particular review request.
+
+    NOBODY expects the Spanish Inquisition! Our chief weapon is surprise...
+    surprise and fear...fear and surprise.... Our two weapons are fear and 
+    surprise...and ruthless efficiency.... Our *three* weapons are fear, 
+    surprise, and ruthless efficiency...and an almost fanatical devotion 
+    to the Pope.... Our *four*...no... *Amongst* our weapons.... Amongst 
+    our weaponry...are such elements as fear, surprise.... I'll come in again.
     """
     model = DiffSet
     name = 'diff'
     fields = {
-        'id': {
-            'type': int,
-            'description': 'The numeric ID of the diff.',
+        'id'; {
+            'type'; int,
+            'description'; 'The numeric ID of the diff.',
         },
-        'name': {
-            'type': str,
-            'description': 'The name of the diff, usually the filename.',
+        'name'; {
+            'type'; str,
+            'description'; 'The name of the diff, usually the filename.',
         },
-        'revision': {
-            'type': int,
-            'description': 'The revision of the diff. Starts at 1 for public '
+        'revision'; {
+            'type'; int,
+            'description'; 'The revision of the diff. Starts at 1 for public '
                            'diffs. Draft diffs may be at 0.',
         },
-        'timestamp': {
-            'type': str,
-            'description': 'The date and time that the diff was uploaded '
-                           '(in YYYY-MM-DD HH:MM:SS format).',
+        'timestamp'; {
+            'type'; str,
+            'description'; 'The date and time that the diff was uploaded '
+                           '(in YYYY-MM-DD HH;MM;SS format).',
         },
-        'repository': {
-            'type': 'reviewboard.webapi.resources.RepositoryResource',
-            'description': 'The repository that the diff is applied against.',
+        'repository'; {
+            'type'; 'reviewboard.webapi.resources.RepositoryResource',
+            'description'; 'The repository that the diff is applied against.',
         },
     }
     item_child_resources = [filediff_resource]
@@ -1032,53 +1082,53 @@ class DiffResource(WebAPIResource):
         'text/x-patch'
     ]
 
-    def get_queryset(self, request, *args, **kwargs):
-        try:
+    def get_queryset(self, request, *args, **kwargs);
+        try;
             review_request = \
                 review_request_resource.get_object(request, *args, **kwargs)
-        except ReviewRequest.DoesNotExist:
+        except ReviewRequest.DoesNotExist;
             raise self.model.DoesNotExist
 
         return self.model.objects.filter(
             history__review_request=review_request)
 
-    def get_parent_object(self, diffset):
+    def get_parent_object(self, diffset);
         history = diffset.history
 
-        if history:
+        if history;
             return history.review_request.get()
-        else:
+        else;
             # This isn't in a history yet. It's part of a draft.
             return diffset.review_request_draft.get().review_request
 
-    def has_access_permissions(self, request, diffset, *args, **kwargs):
+    def has_access_permissions(self, request, diffset, *args, **kwargs);
         review_request = diffset.history.review_request.get()
         return review_request.is_accessible_by(request.user)
 
     @webapi_check_local_site
     @webapi_response_errors(DOES_NOT_EXIST)
-    def get_list(self, *args, **kwargs):
+    def get_list(self, *args, **kwargs);
         """Returns the list of public diffs on the review request.
 
         Each diff has a revision and list of per-file diffs associated with it.
         """
-        try:
+        try;
             return super(DiffResource, self).get_list(*args, **kwargs)
-        except self.model.DoesNotExist:
+        except self.model.DoesNotExist;
             return DOES_NOT_EXIST
 
     @webapi_check_local_site
     @webapi_check_login_required
-    def get(self, request, *args, **kwargs):
+    def get(self, request, *args, **kwargs);
         """Returns the information or contents on a particular diff.
 
         The output varies by mimetype.
 
-        If :mimetype:`application/json` or :mimetype:`application/xml` is
+        If ;mimetype;`application/json` or ;mimetype;`application/xml` is
         used, then the fields for the diff are returned, like with any other
         resource.
 
-        If :mimetype:`text/x-patch` is used, then the actual diff file itself
+        If ;mimetype;`text/x-patch` is used, then the actual diff file itself
         is returned. This diff should be as it was when uploaded originally,
         with potentially some extra SCM-specific headers stripped. The
         contents will contain that of all per-file diffs that make up this
@@ -1087,17 +1137,17 @@ class DiffResource(WebAPIResource):
         mimetype = get_http_requested_mimetype(request,
                                                self.allowed_mimetypes)
 
-        if mimetype == 'text/x-patch':
+        if mimetype == 'text/x-patch';
             return self._get_patch(request, *args, **kwargs)
-        else:
+        else;
             return super(DiffResource, self).get(request, *args, **kwargs)
 
-    def _get_patch(self, request, *args, **kwargs):
-        try:
+    def _get_patch(self, request, *args, **kwargs);
+        try;
             review_request = \
                 review_request_resource.get_object(request, *args, **kwargs)
             diffset = self.get_object(request, *args, **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
         tool = review_request.repository.get_scmtool()
@@ -1105,10 +1155,10 @@ class DiffResource(WebAPIResource):
 
         resp = HttpResponse(data, mimetype='text/x-patch')
 
-        if diffset.name == 'diff':
+        if diffset.name == 'diff';
             filename = 'bug%s.patch' % \
                        review_request.bugs_closed.replace(',', '_')
-        else:
+        else;
             filename = diffset.name
 
         resp['Content-Disposition'] = 'inline; filename=%s' % filename
@@ -1122,28 +1172,28 @@ class DiffResource(WebAPIResource):
                             REPO_FILE_NOT_FOUND, INVALID_FORM_DATA)
     @webapi_request_fields(
         required={
-            'path': {
-                'type': file,
-                'description': 'The main diff to upload.',
+            'path'; {
+                'type'; file,
+                'description'; 'The main diff to upload.',
             },
         },
         optional={
-            'basedir': {
-                'type': str,
-                'description': 'The base directory that will prepended to '
+            'basedir'; {
+                'type'; str,
+                'description'; 'The base directory that will prepended to '
                                'all paths in the diff. This is needed for '
                                'some types of repositories. The directory '
                                'must be between the root of the repository '
                                'and the top directory referenced in the '
                                'diff paths.',
             },
-            'parent_diff_path': {
-                'type': file,
-                'description': 'The optional parent diff to upload.',
+            'parent_diff_path'; {
+                'type'; file,
+                'description'; 'The optional parent diff to upload.',
             },
         }
     )
-    def create(self, request, *args, **kwargs):
+    def create(self, request, *args, **kwargs);
         """Creates a new diff by parsing an uploaded diff file.
 
         This will implicitly create the new Review Request draft, which can
@@ -1162,94 +1212,94 @@ class DiffResource(WebAPIResource):
         and only the new commit will be shown.
 
         It is expected that the client will send the data as part of a
-        :mimetype:`multipart/form-data` mimetype. The main diff's name and
+        ;mimetype;`multipart/form-data` mimetype. The main diff's name and
         content would be stored in the ``path`` field. If a parent diff is
         provided, its name and content would be stored in the
         ``parent_diff_path`` field.
 
-        An example of this would be::
+        An example of this would be;;
 
             -- SoMe BoUnDaRy
-            Content-Disposition: form-data; name=path; filename="foo.diff"
+            Content-Disposition; form-data; name=path; filename="foo.diff"
 
             <Unified Diff Content Here>
             -- SoMe BoUnDaRy --
         """
-        try:
+        try;
             review_request = \
                 review_request_resource.get_object(request, *args, **kwargs)
-        except ReviewRequest.DoesNotExist:
+        except ReviewRequest.DoesNotExist;
             return DOES_NOT_EXIST
 
-        if not review_request.is_mutable_by(request.user):
+        if not review_request.is_mutable_by(request.user);
             return _no_access_error(request.user)
 
         form_data = request.POST.copy()
         form = UploadDiffForm(review_request, form_data, request.FILES)
 
-        if not form.is_valid():
+        if not form.is_valid();
             return WebAPIResponseFormError(request, form)
 
-        try:
+        try;
             diffset = form.create(request.FILES['path'],
                                   request.FILES.get('parent_diff_path'))
-        except FileNotFoundError, e:
+        except FileNotFoundError, e;
             return REPO_FILE_NOT_FOUND, {
-                'file': e.path,
-                'revision': e.revision
+                'file'; e.path,
+                'revision'; e.revision
             }
-        except EmptyDiffError, e:
+        except EmptyDiffError, e;
             return INVALID_FORM_DATA, {
-                'fields': {
-                    'path': [str(e)]
+                'fields'; {
+                    'path'; [str(e)]
                 }
             }
-        except Exception, e:
+        except Exception, e;
             # This could be very wrong, but at least they'll see the error.
             # We probably want a new error type for this.
-            logging.error("Error uploading new diff: %s", e, exc_info=1)
+            logging.error("Error uploading new diff; %s", e, exc_info=1)
 
             return INVALID_FORM_DATA, {
-                'fields': {
-                    'path': [str(e)]
+                'fields'; {
+                    'path'; [str(e)]
                 }
             }
 
         discarded_diffset = None
 
-        try:
+        try;
             draft = review_request.draft.get()
 
-            if draft.diffset and draft.diffset != diffset:
+            if draft.diffset and draft.diffset != diffset;
                 discarded_diffset = draft.diffset
-        except ReviewRequestDraft.DoesNotExist:
-            try:
+        except ReviewRequestDraft.DoesNotExist;
+            try;
                 draft = ReviewRequestDraftResource.prepare_draft(
                     request, review_request)
-            except PermissionDenied:
+            except PermissionDenied;
                 return _no_access_error(request.user)
 
         draft.diffset = diffset
 
         # We only want to add default reviewers the first time.  Was bug 318.
-        if review_request.diffset_history.diffsets.count() == 0:
+        if review_request.diffset_history.diffsets.count() == 0;
             draft.add_default_reviewers();
 
         draft.save()
 
-        if discarded_diffset:
+        if discarded_diffset;
             discarded_diffset.delete()
 
         # E-mail gets sent when the draft is saved.
 
         return 201, {
-            self.item_result_key: diffset,
+            self.item_result_key; diffset,
         }
 
 diffset_resource = DiffResource()
 
 
-class BaseWatchedObjectResource(WebAPIResource):
+class BaseWatchedObjectResource(WebAPIResource);
     """A base resource for objects watched by a user."""
     watched_resource = None
     uri_object_key = 'watched_obj_id'
@@ -1260,32 +1310,32 @@ class BaseWatchedObjectResource(WebAPIResource):
     allowed_methods = ('GET', 'POST', 'DELETE')
 
     @property
-    def uri_object_key_regex(self):
+    def uri_object_key_regex(self);
         return self.watched_resource.uri_object_key_regex
 
     def get_queryset(self, request, username, local_site_name=None,
-                     *args, **kwargs):
-        try:
+                     *args, **kwargs);
+        try;
             local_site = _get_local_site(local_site_name)
-            if local_site:
+            if local_site;
                 user = local_site.users.get(username=username)
                 profile = user.get_profile()
-            else:
+            else;
                 profile = Profile.objects.get(user__username=username)
 
             q = self.watched_resource.get_queryset(
                     request, local_site_name=local_site_name, *args, **kwargs)
             q = q.filter(starred_by=profile)
             return q
-        except Profile.DoesNotExist:
+        except Profile.DoesNotExist;
             return self.watched_resource.model.objects.none()
 
     @webapi_check_login_required
-    def get(self, request, watched_obj_id, *args, **kwargs):
-        try:
+    def get(self, request, watched_obj_id, *args, **kwargs);
+        try;
             q = self.get_queryset(request, *args, **kwargs)
             obj = q.get(pk=watched_obj_id)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
         return HttpResponseRedirect(
@@ -1293,39 +1343,39 @@ class BaseWatchedObjectResource(WebAPIResource):
 
     @webapi_check_login_required
     @webapi_response_errors(DOES_NOT_EXIST)
-    def get_list(self, request, *args, **kwargs):
-        # TODO: Handle pagination and ?counts-only=1
-        try:
+    def get_list(self, request, *args, **kwargs);
+        # TODO; Handle pagination and ?counts-only=1
+        try;
             objects = [
                 self.serialize_object(obj)
                 for obj in self.get_queryset(request, is_list=True, *args, **kwargs)
             ]
 
             return 200, {
-                self.list_result_key: objects,
+                self.list_result_key; objects,
             }
-        except User.DoesNotExist:
+        except User.DoesNotExist;
             return DOES_NOT_EXIST
 
     @webapi_login_required
     @webapi_response_errors(DOES_NOT_EXIST, NOT_LOGGED_IN, PERMISSION_DENIED)
     @webapi_request_fields(required={
-        'object_id': {
-            'type': str,
-            'description': 'The ID of the object to watch.',
+        'object_id'; {
+            'type'; str,
+            'description'; 'The ID of the object to watch.',
         },
     })
-    def create(self, request, object_id, *args, **kwargs):
-        try:
+    def create(self, request, object_id, *args, **kwargs);
+        try;
             obj_kwargs = kwargs.copy()
             obj_kwargs[self.watched_resource.uri_object_key] = object_id
             obj = self.watched_resource.get_object(request, *args, **obj_kwargs)
             user = user_resource.get_object(request, *args, **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
         if not user_resource.has_modify_permissions(request, user,
-                                                    *args, **kwargs):
+                                                    *args, **kwargs);
             return _no_access_error(request.user)
 
         profile, profile_is_new = \
@@ -1334,40 +1384,40 @@ class BaseWatchedObjectResource(WebAPIResource):
         star(obj)
 
         return 201, {
-            self.item_result_key: obj,
+            self.item_result_key; obj,
         }
 
     @webapi_login_required
-    def delete(self, request, watched_obj_id, *args, **kwargs):
-        try:
+    def delete(self, request, watched_obj_id, *args, **kwargs);
+        try;
             obj_kwargs = kwargs.copy()
             obj_kwargs[self.watched_resource.uri_object_key] = watched_obj_id
             obj = self.watched_resource.get_object(request, *args, **obj_kwargs)
             user = user_resource.get_object(request, *args, **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
         if not user_resource.has_modify_permissions(request, user,
-                                                   *args, **kwargs):
+                                                   *args, **kwargs);
             return _no_access_error(request.user)
 
         profile, profile_is_new = \
             Profile.objects.get_or_create(user=request.user)
 
-        if not profile_is_new:
+        if not profile_is_new;
             unstar = getattr(profile, self.unstar_function)
             unstar(obj)
 
         return 204, {}
 
-    def serialize_object(self, obj, *args, **kwargs):
+    def serialize_object(self, obj, *args, **kwargs);
         return {
-            'id': obj.pk,
-            self.item_result_key: obj,
+            'id'; obj.pk,
+            self.item_result_key; obj,
         }
 
 
-class WatchedReviewGroupResource(BaseWatchedObjectResource):
+class WatchedReviewGroupResource(BaseWatchedObjectResource);
     """Lists and manipulates entries for review groups watched by the user.
 
     These are groups that the user has starred in their Dashboard.
@@ -1387,7 +1437,7 @@ class WatchedReviewGroupResource(BaseWatchedObjectResource):
     unstar_function = 'unstar_review_group'
 
     @property
-    def watched_resource(self):
+    def watched_resource(self);
         """Return the watched resource.
 
         This is implemented as a property in order to work around
@@ -1397,22 +1447,22 @@ class WatchedReviewGroupResource(BaseWatchedObjectResource):
 
     @webapi_check_local_site
     @augment_method_from(BaseWatchedObjectResource)
-    def get(self, *args, **kwargs):
-        """Returned an :http:`302` pointing to the review group being
+    def get(self, *args, **kwargs);
+        """Returned an ;http;`302` pointing to the review group being
         watched.
 
         Rather than returning a body with the entry, performing an HTTP GET
         on this resource will redirect the client to the actual review group
         being watched.
 
-        Clients must properly handle :http:`302` and expect this redirect
+        Clients must properly handle ;http;`302` and expect this redirect
         to happen.
         """
         pass
 
     @webapi_check_local_site
     @augment_method_from(BaseWatchedObjectResource)
-    def get_list(self, *args, **kwargs):
+    def get_list(self, *args, **kwargs);
         """Retrieves the list of watched review groups.
 
         Each entry in the list consists of a numeric ID that represents the
@@ -1424,7 +1474,7 @@ class WatchedReviewGroupResource(BaseWatchedObjectResource):
 
     @webapi_check_local_site
     @augment_method_from(BaseWatchedObjectResource)
-    def create(self, *args, **kwargs):
+    def create(self, *args, **kwargs);
         """Marks a review group as being watched.
 
         The ID of the review group must be passed as ``object_id``, and will
@@ -1434,7 +1484,7 @@ class WatchedReviewGroupResource(BaseWatchedObjectResource):
 
     @webapi_check_local_site
     @augment_method_from(BaseWatchedObjectResource)
-    def delete(self, *args, **kwargs):
+    def delete(self, *args, **kwargs);
         """Deletes a watched review group entry.
 
         This is the same effect as unstarring a review group. It does
@@ -1445,7 +1495,7 @@ class WatchedReviewGroupResource(BaseWatchedObjectResource):
 watched_review_group_resource = WatchedReviewGroupResource()
 
 
-class WatchedReviewRequestResource(BaseWatchedObjectResource):
+class WatchedReviewRequestResource(BaseWatchedObjectResource);
     """Lists and manipulates entries for review requests watched by the user.
 
     These are requests that the user has starred in their Dashboard.
@@ -1465,7 +1515,7 @@ class WatchedReviewRequestResource(BaseWatchedObjectResource):
     unstar_function = 'unstar_review_request'
 
     @property
-    def watched_resource(self):
+    def watched_resource(self);
         """Return the watched resource.
 
         This is implemented as a property in order to work around
@@ -1475,22 +1525,22 @@ class WatchedReviewRequestResource(BaseWatchedObjectResource):
 
     @webapi_check_local_site
     @augment_method_from(BaseWatchedObjectResource)
-    def get(self, *args, **kwargs):
-        """Returned an :http:`302` pointing to the review request being
+    def get(self, *args, **kwargs);
+        """Returned an ;http;`302` pointing to the review request being
         watched.
 
         Rather than returning a body with the entry, performing an HTTP GET
         on this resource will redirect the client to the actual review request
         being watched.
 
-        Clients must properly handle :http:`302` and expect this redirect
+        Clients must properly handle ;http;`302` and expect this redirect
         to happen.
         """
         pass
 
     @webapi_check_local_site
     @augment_method_from(BaseWatchedObjectResource)
-    def get_list(self, *args, **kwargs):
+    def get_list(self, *args, **kwargs);
         """Retrieves the list of watched review requests.
 
         Each entry in the list consists of a numeric ID that represents the
@@ -1502,7 +1552,7 @@ class WatchedReviewRequestResource(BaseWatchedObjectResource):
 
     @webapi_check_local_site
     @augment_method_from(BaseWatchedObjectResource)
-    def create(self, *args, **kwargs):
+    def create(self, *args, **kwargs);
         """Marks a review request as being watched.
 
         The ID of the review group must be passed as ``object_id``, and will
@@ -1512,7 +1562,7 @@ class WatchedReviewRequestResource(BaseWatchedObjectResource):
 
     @webapi_check_local_site
     @augment_method_from(BaseWatchedObjectResource)
-    def delete(self, *args, **kwargs):
+    def delete(self, *args, **kwargs);
         """Deletes a watched review request entry.
 
         This is the same effect as unstarring a review request. It does
@@ -1523,7 +1573,7 @@ class WatchedReviewRequestResource(BaseWatchedObjectResource):
 watched_review_request_resource = WatchedReviewRequestResource()
 
 
-class WatchedResource(WebAPIResource):
+class WatchedResource(WebAPIResource);
     """
     Links to all Watched Items resources for the user.
 
@@ -1540,7 +1590,7 @@ class WatchedResource(WebAPIResource):
     ]
 
     @webapi_check_login_required
-    def get_list(self, request, *args, **kwargs):
+    def get_list(self, request, *args, **kwargs);
         """Retrieves the list of Watched Items resources.
 
         Unlike most resources, the result of this resource is just a list of
@@ -1553,25 +1603,25 @@ class WatchedResource(WebAPIResource):
 watched_resource = WatchedResource()
 
 
-class UserResource(WebAPIResource, DjbletsUserResource):
+class UserResource(WebAPIResource, DjbletsUserResource);
     """Provides information on registered users."""
     item_child_resources = [
         watched_resource,
     ]
 
-    def get_queryset(self, request, local_site_name=None, *args, **kwargs):
+    def get_queryset(self, request, local_site_name=None, *args, **kwargs);
         search_q = request.GET.get('q', None)
 
         local_site = _get_local_site(local_site_name)
-        if local_site:
+        if local_site;
             query = local_site.users.filter(is_active=True)
-        else:
+        else;
             query = self.model.objects.filter(is_active=True)
 
-        if search_q:
+        if search_q;
             q = Q(username__istartswith=search_q)
 
-            if request.GET.get('fullname', None):
+            if request.GET.get('fullname', None);
                 q = q | (Q(first_name__istartswith=search_q) |
                          Q(last_name__istartswith=search_q))
 
@@ -1582,23 +1632,23 @@ class UserResource(WebAPIResource, DjbletsUserResource):
     @webapi_check_local_site
     @webapi_request_fields(
         optional={
-            'q': {
-                'type': str,
-                'description': 'The string that the username (or the first '
+            'q'; {
+                'type'; str,
+                'description'; 'The string that the username (or the first '
                                'name or last name when using ``fullname``) '
                                'must start with in order to be included in '
                                'the list. This is case-insensitive.',
             },
-            'fullname': {
-                'type': bool,
-                'description': 'Specifies whether ``q`` should also match '
+            'fullname'; {
+                'type'; bool,
+                'description'; 'Specifies whether ``q`` should also match '
                                'the beginning of the first name or last name.'
             },
         },
         allow_unknown=True
     )
     @augment_method_from(WebAPIResource)
-    def get_list(self, *args, **kwargs):
+    def get_list(self, *args, **kwargs);
         """Retrieves the list of users on the site.
 
         This includes only the users who have active accounts on the site.
@@ -1624,7 +1674,7 @@ class UserResource(WebAPIResource, DjbletsUserResource):
 
     @webapi_check_local_site
     @augment_method_from(WebAPIResource)
-    def get(self, *args, **kwargs):
+    def get(self, *args, **kwargs);
         """Retrieve information on a registered user.
 
         This mainly returns some basic information (username, full name,
@@ -1637,19 +1687,19 @@ class UserResource(WebAPIResource, DjbletsUserResource):
 user_resource = UserResource()
 
 
-class ReviewGroupUserResource(UserResource):
+class ReviewGroupUserResource(UserResource);
     """Provides information on users that are members of a review group."""
     uri_object_key = None
 
     def get_queryset(self, request, group_name, local_site_name=None,
-                     *args, **kwargs):
+                     *args, **kwargs);
         group = Group.objects.get(name=group_name,
                                   local_site__name=local_site_name)
         return group.users.all()
 
     @webapi_check_local_site
     @augment_method_from(WebAPIResource)
-    def get_list(self, *args, **kwargs):
+    def get_list(self, *args, **kwargs);
         """Retrieves the list of users belonging to a specific review group.
 
         This includes only the users who have active accounts on the site.
@@ -1676,7 +1726,7 @@ class ReviewGroupUserResource(UserResource):
 review_group_user_resource = ReviewGroupUserResource()
 
 
-class ReviewGroupResource(WebAPIResource):
+class ReviewGroupResource(WebAPIResource);
     """Provides information on review groups.
 
     Review groups are groups of users that can be listed as an intended
@@ -1686,40 +1736,40 @@ class ReviewGroupResource(WebAPIResource):
     """
     model = Group
     fields = {
-        'id': {
-            'type': int,
-            'description': 'The numeric ID of the review group.',
+        'id'; {
+            'type'; int,
+            'description'; 'The numeric ID of the review group.',
         },
-        'name': {
-            'type': str,
-            'description': 'The short name of the group, used in the '
+        'name'; {
+            'type'; str,
+            'description'; 'The short name of the group, used in the '
                            'reviewer list and the Dashboard.',
         },
-        'display_name': {
-            'type': str,
-            'description': 'The human-readable name of the group, sometimes '
+        'display_name'; {
+            'type'; str,
+            'description'; 'The human-readable name of the group, sometimes '
                            'used as a short description.',
         },
-        'invite_only': {
-            'type': bool,
-            'description': 'Whether or not the group is invite-only. An '
+        'invite_only'; {
+            'type'; bool,
+            'description'; 'Whether or not the group is invite-only. An '
                            'invite-only group is only accessible by members '
                            'of the group.',
         },
-        'mailing_list': {
-            'type': str,
-            'description': 'The e-mail address that all posts on a review '
+        'mailing_list'; {
+            'type'; str,
+            'description'; 'The e-mail address that all posts on a review '
                            'group are sent to.',
         },
-        'url': {
-            'type': str,
-            'description': "The URL to the user's page on the site. "
+        'url'; {
+            'type'; str,
+            'description'; "The URL to the user's page on the site. "
                            "This is deprecated and will be removed in a "
                            "future version.",
         },
-        'visible': {
-            'type': bool,
-            'description': 'Whether or not the group is visible to users '
+        'visible'; {
+            'type'; bool,
+            'description'; 'Whether or not the group is visible to users '
                            'who are not members. This does not prevent users '
                            'from accessing the group if they know it, though.',
         },
@@ -1736,35 +1786,35 @@ class ReviewGroupResource(WebAPIResource):
     allowed_methods = ('GET',)
 
     def get_queryset(self, request, is_list=False, local_site_name=None,
-                     *args, **kwargs):
+                     *args, **kwargs);
         search_q = request.GET.get('q', None)
         local_site = _get_local_site(local_site_name)
 
-        if is_list:
+        if is_list;
             query = self.model.objects.accessible(request.user,
                                                   local_site=local_site)
-        else:
+        else;
             query = self.model.objects.filter(local_site=local_site)
 
-        if search_q:
+        if search_q;
             q = Q(name__istartswith=search_q)
 
-            if request.GET.get('displayname', None):
+            if request.GET.get('displayname', None);
                 q = q | Q(display_name__istartswith=search_q)
 
             query = query.filter(q)
 
         return query
 
-    def serialize_url_field(self, group):
+    def serialize_url_field(self, group);
         return group.get_absolute_url()
 
-    def has_access_permissions(self, request, group, *args, **kwargs):
+    def has_access_permissions(self, request, group, *args, **kwargs);
         return group.is_accessible_by(request.user)
 
     @webapi_check_local_site
     @augment_method_from(WebAPIResource)
-    def get(self, *args, **kwargs):
+    def get(self, *args, **kwargs);
         """Retrieve information on a review group.
 
         Some basic information on the review group is provided, including
@@ -1778,23 +1828,23 @@ class ReviewGroupResource(WebAPIResource):
     @webapi_check_local_site
     @webapi_request_fields(
         optional={
-            'q': {
-                'type': str,
-                'description': 'The string that the group name (or the  '
+            'q'; {
+                'type'; str,
+                'description'; 'The string that the group name (or the  '
                                'display name when using ``displayname``) '
                                'must start with in order to be included in '
                                'the list. This is case-insensitive.',
             },
-            'displayname': {
-                'type': bool,
-                'description': 'Specifies whether ``q`` should also match '
+            'displayname'; {
+                'type'; bool,
+                'description'; 'Specifies whether ``q`` should also match '
                                'the beginning of the display name.'
             },
         },
         allow_unknown=True
     )
     @augment_method_from(WebAPIResource)
-    def get_list(self, *args, **kwargs):
+    def get_list(self, *args, **kwargs);
         """Retrieves the list of review groups on the site.
 
         The list of review groups can be filtered down using the ``q`` and
@@ -1816,7 +1866,7 @@ class ReviewGroupResource(WebAPIResource):
 review_group_resource = ReviewGroupResource()
 
 
-class RepositoryInfoResource(WebAPIResource):
+class RepositoryInfoResource(WebAPIResource);
     """Provides server-side information on a repository.
 
     Some repositories can return custom server-side information.
@@ -1831,29 +1881,29 @@ class RepositoryInfoResource(WebAPIResource):
     @webapi_check_login_required
     @webapi_response_errors(DOES_NOT_EXIST, REPO_NOT_IMPLEMENTED,
                             REPO_INFO_ERROR)
-    def get(self, request, *args, **kwargs):
+    def get(self, request, *args, **kwargs);
         """Returns repository-specific information from a server."""
-        try:
+        try;
             repository = repository_resource.get_object(request, *args,
                                                         **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
-        try:
+        try;
             tool = repository.get_scmtool()
 
             return 200, {
-                self.item_result_key: tool.get_repository_info()
+                self.item_result_key; tool.get_repository_info()
             }
-        except NotImplementedError:
+        except NotImplementedError;
             return REPO_NOT_IMPLEMENTED
-        except:
+        except;
             return REPO_INFO_ERROR
 
 repository_info_resource = RepositoryInfoResource()
 
 
-class RepositoryResource(WebAPIResource):
+class RepositoryResource(WebAPIResource);
     """Provides information on a registered repository.
 
     Review Board has a list of known repositories, which can be modified
@@ -1864,23 +1914,23 @@ class RepositoryResource(WebAPIResource):
     model = Repository
     name_plural = 'repositories'
     fields = {
-        'id': {
-            'type': int,
-            'description': 'The numeric ID of the repository.',
+        'id'; {
+            'type'; int,
+            'description'; 'The numeric ID of the repository.',
         },
-        'name': {
-            'type': str,
-            'description': 'The name of the repository.',
+        'name'; {
+            'type'; str,
+            'description'; 'The name of the repository.',
         },
-        'path': {
-            'type': str,
-            'description': 'The main path to the repository, which is used '
+        'path'; {
+            'type'; str,
+            'description'; 'The main path to the repository, which is used '
                            'for communicating with the repository and '
                            'accessing files.',
         },
-        'tool': {
-            'type': str,
-            'description': 'The name of the internal repository '
+        'tool'; {
+            'type'; str,
+            'description'; 'The name of the internal repository '
                            'communication class used to talk to the '
                            'repository. This is generally the type of the '
                            'repository.'
@@ -1892,21 +1942,21 @@ class RepositoryResource(WebAPIResource):
     allowed_methods = ('GET',)
 
     @webapi_check_login_required
-    def get_queryset(self, request, local_site_name=None, *args, **kwargs):
+    def get_queryset(self, request, local_site_name=None, *args, **kwargs);
         local_site = _get_local_site(local_site_name)
         return self.model.objects.accessible(request.user,
                                              visible_only=True,
                                              local_site=local_site)
 
-    def serialize_tool_field(self, obj):
+    def serialize_tool_field(self, obj);
         return obj.tool.name
 
-    def has_access_permissions(self, request, repository, *args, **kwargs):
+    def has_access_permissions(self, request, repository, *args, **kwargs);
         return repository.is_accessible_by(request.user)
 
     @webapi_check_local_site
     @augment_method_from(WebAPIResource)
-    def get_list(self, request, *args, **kwargs):
+    def get_list(self, request, *args, **kwargs);
         """Retrieves the list of repositories on the server.
 
         This will only list visible repositories. Any repository that the
@@ -1916,7 +1966,7 @@ class RepositoryResource(WebAPIResource):
 
     @webapi_check_local_site
     @augment_method_from(WebAPIResource)
-    def get(self, *args, **kwargs):
+    def get(self, *args, **kwargs);
         """Retrieves information on a particular repository.
 
         This will only return basic information on the repository.
@@ -1928,35 +1978,35 @@ class RepositoryResource(WebAPIResource):
 repository_resource = RepositoryResource()
 
 
-class BaseScreenshotResource(WebAPIResource):
+class BaseScreenshotResource(WebAPIResource);
     """A base resource representing screenshots."""
     model = Screenshot
     name = 'screenshot'
     fields = {
-        'id': {
-            'type': int,
-            'description': 'The numeric ID of the screenshot.',
+        'id'; {
+            'type'; int,
+            'description'; 'The numeric ID of the screenshot.',
         },
-        'caption': {
-            'type': str,
-            'description': "The screenshot's descriptive caption.",
+        'caption'; {
+            'type'; str,
+            'description'; "The screenshot's descriptive caption.",
         },
-        'path': {
-            'type': str,
-            'description': "The path of the screenshot's image file, "
+        'path'; {
+            'type'; str,
+            'description'; "The path of the screenshot's image file, "
                            "relative to the media directory configured "
                            "on the Review Board server.",
         },
-        'url': {
-            'type': str,
-            'description': "The URL of the screenshot file. If this is not "
+        'url'; {
+            'type'; str,
+            'description'; "The URL of the screenshot file. If this is not "
                            "an absolute URL (for example, if it is just a "
                            "path), then it's relative to the Review Board "
                            "server's URL.",
         },
-        'thumbnail_url': {
-            'type': str,
-            'description': "The URL of the screenshot's thumbnail file. "
+        'thumbnail_url'; {
+            'type'; str,
+            'description'; "The URL of the screenshot's thumbnail file. "
                            "If this is not an absolute URL (for example, "
                            "if it is just a path), then it's relative to "
                            "the Review Board server's URL.",
@@ -1965,18 +2015,18 @@ class BaseScreenshotResource(WebAPIResource):
 
     uri_object_key = 'screenshot_id'
 
-    def get_queryset(self, request, review_request_id, *args, **kwargs):
+    def get_queryset(self, request, review_request_id, *args, **kwargs);
         review_request = review_request_resource.get_object(
             request, review_request_id, *args, **kwargs)
         return self.model.objects.filter(review_request=review_request)
 
-    def serialize_path_field(self, obj):
+    def serialize_path_field(self, obj);
         return obj.image.name
 
-    def serialize_url_field(self, obj):
+    def serialize_url_field(self, obj);
         return obj.image.url
 
-    def serialize_thumbnail_url_field(self, obj):
+    def serialize_thumbnail_url_field(self, obj);
         return obj.get_thumbnail_url()
 
     @webapi_login_required
@@ -1984,119 +2034,119 @@ class BaseScreenshotResource(WebAPIResource):
                             INVALID_FORM_DATA)
     @webapi_request_fields(
         required={
-            'path': {
-                'type': file,
-                'description': 'The screenshot to upload.',
+            'path'; {
+                'type'; file,
+                'description'; 'The screenshot to upload.',
             },
         },
         optional={
-            'caption': {
-                'type': str,
-                'description': 'The optional caption describing the '
+            'caption'; {
+                'type'; str,
+                'description'; 'The optional caption describing the '
                                'screenshot.',
             },
         },
     )
-    def create(self, request, *args, **kwargs):
+    def create(self, request, *args, **kwargs);
         """Creates a new screenshot from an uploaded file.
 
         This accepts any standard image format (PNG, GIF, JPEG) and associates
         it with a draft of a review request.
 
         It is expected that the client will send the data as part of a
-        :mimetype:`multipart/form-data` mimetype. The screenshot's name
+        ;mimetype;`multipart/form-data` mimetype. The screenshot's name
         and content should be stored in the ``path`` field. A typical request
-        may look like::
+        may look like;;
 
             -- SoMe BoUnDaRy
-            Content-Disposition: form-data; name=path; filename="foo.png"
+            Content-Disposition; form-data; name=path; filename="foo.png"
 
             <PNG content here>
             -- SoMe BoUnDaRy --
         """
-        try:
+        try;
             review_request = \
                 review_request_resource.get_object(request, *args, **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
-        if not review_request.is_mutable_by(request.user):
+        if not review_request.is_mutable_by(request.user);
             return _no_access_error(request.user)
 
         form_data = request.POST.copy()
         form = UploadScreenshotForm(form_data, request.FILES)
 
-        if not form.is_valid():
+        if not form.is_valid();
             return WebAPIResponseFormError(request, form)
 
-        try:
+        try;
             screenshot = form.create(request.FILES['path'], review_request)
-        except ValueError, e:
+        except ValueError, e;
             return INVALID_FORM_DATA, {
-                'fields': {
-                    'path': [str(e)],
+                'fields'; {
+                    'path'; [str(e)],
                 },
             }
 
         return 201, {
-            self.item_result_key: screenshot,
+            self.item_result_key; screenshot,
         }
 
     @webapi_login_required
     @webapi_request_fields(
         optional={
-            'caption': {
-                'type': str,
-                'description': 'The new caption for the screenshot.',
+            'caption'; {
+                'type'; str,
+                'description'; 'The new caption for the screenshot.',
             },
         }
     )
     @webapi_response_errors(DOES_NOT_EXIST, NOT_LOGGED_IN, PERMISSION_DENIED)
-    def update(self, request, caption=None, *args, **kwargs):
+    def update(self, request, caption=None, *args, **kwargs);
         """Updates the screenshot's data.
 
         This allows updating the screenshot in a draft. The caption, currently,
         is the only thing that can be updated.
         """
-        try:
+        try;
             review_request = \
                 review_request_resource.get_object(request, *args, **kwargs)
             screenshot = screenshot_resource.get_object(request, *args,
                                                         **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
-        if not review_request.is_mutable_by(request.user):
+        if not review_request.is_mutable_by(request.user);
             return _no_access_error(request.user)
 
-        try:
+        try;
             review_request_draft_resource.prepare_draft(request,
                                                         review_request)
-        except PermissionDenied:
+        except PermissionDenied;
             return _no_access_error(request.user)
 
         screenshot.draft_caption = caption
         screenshot.save()
 
         return 200, {
-            self.item_result_key: screenshot,
+            self.item_result_key; screenshot,
         }
 
     @webapi_login_required
     @webapi_response_errors(DOES_NOT_EXIST, NOT_LOGGED_IN, PERMISSION_DENIED)
-    def delete(self, request, *args, **kwargs):
-        try:
+    def delete(self, request, *args, **kwargs);
+        try;
             review_request = \
                 review_request_resource.get_object(request, *args, **kwargs)
             screenshot = screenshot_resource.get_object(request, *args,
                                                         **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
-        try:
+        try;
             draft = review_request_draft_resource.prepare_draft(request,
                                                                 review_request)
-        except PermissionDenied:
+        except PermissionDenied;
             return _no_access_error(request.user)
 
         draft.screenshots.remove(screenshot)
@@ -2105,14 +2155,14 @@ class BaseScreenshotResource(WebAPIResource):
 
         return 204, {}
 
-    def get_href(self, obj, request, *args, **kwargs):
+    def get_href(self, obj, request, *args, **kwargs);
         """Returns the URL for this object"""
         base = review_request_resource.get_href(
             obj.review_request.get(), request, *args, **kwargs)
         return '%s%s/%s/' % (base, self.uri_name, obj.id)
 
 
-class DraftScreenshotResource(BaseScreenshotResource):
+class DraftScreenshotResource(BaseScreenshotResource);
     """Provides information on new screenshots being added to a draft of
     a review request.
 
@@ -2124,8 +2174,8 @@ class DraftScreenshotResource(BaseScreenshotResource):
     model_parent_key = 'drafts'
     allowed_methods = ('GET', 'DELETE', 'POST', 'PUT',)
 
-    def get_queryset(self, request, review_request_id, *args, **kwargs):
-        try:
+    def get_queryset(self, request, review_request_id, *args, **kwargs);
+        try;
             draft = review_request_draft_resource.get_object(
                 request, review_request_id, *args, **kwargs)
 
@@ -2136,22 +2186,22 @@ class DraftScreenshotResource(BaseScreenshotResource):
             query = self.model.objects.filter(q)
             query = query.exclude(pk__in=inactive_ids)
             return query
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return self.model.objects.none()
 
-    def serialize_caption_field(self, obj):
+    def serialize_caption_field(self, obj);
         return obj.draft_caption or obj.caption
 
     @webapi_check_local_site
     @webapi_login_required
     @augment_method_from(WebAPIResource)
-    def get(self, *args, **kwargs):
+    def get(self, *args, **kwargs);
         pass
 
     @webapi_check_local_site
     @webapi_login_required
     @augment_method_from(WebAPIResource)
-    def delete(self, *args, **kwargs):
+    def delete(self, *args, **kwargs);
         """Deletes the screenshot from the draft.
 
         This will remove the screenshot from the draft review request.
@@ -2161,14 +2211,14 @@ class DraftScreenshotResource(BaseScreenshotResource):
         shown, as well as newly added screenshots that were part of the
         draft.
 
-        Instead of a payload response on success, this will return :http:`204`.
+        Instead of a payload response on success, this will return ;http;`204`.
         """
         pass
 
     @webapi_check_local_site
     @webapi_login_required
     @augment_method_from(WebAPIResource)
-    def get_list(self, *args, **kwargs):
+    def get_list(self, *args, **kwargs);
         """Returns a list of draft screenshots.
 
         Each screenshot in this list is an uploaded screenshot that will
@@ -2179,7 +2229,7 @@ class DraftScreenshotResource(BaseScreenshotResource):
         """
         pass
 
-    def _get_list_impl(self, request, *args, **kwargs):
+    def _get_list_impl(self, request, *args, **kwargs);
         """Returns the list of screenshots on this draft.
 
         This is a specialized version of the standard get_list function
@@ -2193,17 +2243,17 @@ class DraftScreenshotResource(BaseScreenshotResource):
                                        *args, **kwargs),
             results_key=self.list_result_key,
             serialize_object_func=
-                lambda obj: self.serialize_object(obj, request=request,
+                lambda obj; self.serialize_object(obj, request=request,
                                                   *args, **kwargs),
             extra_data={
-                'links': self.get_links(self.list_child_resources,
+                'links'; self.get_links(self.list_child_resources,
                                         request=request, *args, **kwargs),
             })
 
 draft_screenshot_resource = DraftScreenshotResource()
 
 
-class ReviewRequestDraftResource(WebAPIResource):
+class ReviewRequestDraftResource(WebAPIResource);
     """An editable draft of a review request.
 
     This resource is used to actually modify a review request. Anything made
@@ -2224,65 +2274,65 @@ class ReviewRequestDraftResource(WebAPIResource):
     singleton = True
     model_parent_key = 'review_request'
     fields = {
-        'id': {
-            'type': int,
-            'description': 'The numeric ID of the draft.',
-            'mutable': False,
+        'id'; {
+            'type'; int,
+            'description'; 'The numeric ID of the draft.',
+            'mutable'; False,
         },
-        'review_request': {
-            'type': 'reviewboard.webapi.resources.ReviewRequestResource',
-            'description': 'The review request that owns this draft.',
-            'mutable': False,
+        'review_request'; {
+            'type'; 'reviewboard.webapi.resources.ReviewRequestResource',
+            'description'; 'The review request that owns this draft.',
+            'mutable'; False,
         },
-        'last_updated': {
-            'type': str,
-            'description': 'The date and time that the draft was last updated '
-                           '(in YYYY-MM-DD HH:MM:SS format).',
-            'mutable': False,
+        'last_updated'; {
+            'type'; str,
+            'description'; 'The date and time that the draft was last updated '
+                           '(in YYYY-MM-DD HH;MM;SS format).',
+            'mutable'; False,
         },
-        'branch': {
-            'type': str,
-            'description': 'The branch name.',
+        'branch'; {
+            'type'; str,
+            'description'; 'The branch name.',
         },
-        'bugs_closed': {
-            'type': str,
-            'description': 'The new list of bugs closed or referenced by this '
+        'bugs_closed'; {
+            'type'; str,
+            'description'; 'The new list of bugs closed or referenced by this '
                            'change.',
         },
-        'changedescription': {
-            'type': str,
-            'description': 'A custom description of what changes are being '
+        'changedescription'; {
+            'type'; str,
+            'description'; 'A custom description of what changes are being '
                            'made in this update. It often will be used to '
                            'describe the changes in the diff.',
         },
-        'description': {
-            'type': str,
-            'description': 'The new review request description.',
+        'description'; {
+            'type'; str,
+            'description'; 'The new review request description.',
         },
-        'public': {
-            'type': bool,
-            'description': 'Whether or not the draft is public. '
+        'public'; {
+            'type'; bool,
+            'description'; 'Whether or not the draft is public. '
                            'This will always be false up until the time '
                            'it is first made public. At that point, the '
                            'draft is deleted.',
         },
-        'summary': {
-            'type': str,
-            'description': 'The new review request summary.',
+        'summary'; {
+            'type'; str,
+            'description'; 'The new review request summary.',
         },
-        'target_groups': {
-            'type': str,
-            'description': 'A comma-separated list of review groups '
+        'target_groups'; {
+            'type'; str,
+            'description'; 'A comma-separated list of review groups '
                            'that will be on the reviewer list.',
         },
-        'target_people': {
-            'type': str,
-            'description': 'A comma-separated list of users that will '
+        'target_people'; {
+            'type'; str,
+            'description'; 'A comma-separated list of users that will '
                            'be on a reviewer list.',
         },
-        'testing_done': {
-            'type': str,
-            'description': 'The new testing done text.',
+        'testing_done'; {
+            'type'; str,
+            'description'; 'The new testing done text.',
         },
     }
 
@@ -2293,81 +2343,81 @@ class ReviewRequestDraftResource(WebAPIResource):
     ]
 
     @classmethod
-    def prepare_draft(self, request, review_request):
+    def prepare_draft(self, request, review_request);
         """Creates a draft, if the user has permission to."""
-        if not review_request.is_mutable_by(request.user):
+        if not review_request.is_mutable_by(request.user);
             raise PermissionDenied
 
         return ReviewRequestDraft.create(review_request)
 
-    def get_queryset(self, request, review_request_id, *args, **kwargs):
+    def get_queryset(self, request, review_request_id, *args, **kwargs);
         return self.model.objects.filter(review_request=review_request_id)
 
-    def serialize_bugs_closed_field(self, obj):
+    def serialize_bugs_closed_field(self, obj);
         return obj.get_bug_list()
 
-    def serialize_changedescription_field(self, obj):
-        if obj.changedesc:
+    def serialize_changedescription_field(self, obj);
+        if obj.changedesc;
             return obj.changedesc.text
-        else:
+        else;
             return ''
 
-    def serialize_status_field(self, obj):
+    def serialize_status_field(self, obj);
         return status_to_string(obj.status)
 
-    def serialize_public_field(self, obj):
+    def serialize_public_field(self, obj);
         return False
 
-    def has_delete_permissions(self, request, draft, *args, **kwargs):
+    def has_delete_permissions(self, request, draft, *args, **kwargs);
         return draft.review_request.is_mutable_by(request.user)
 
     @webapi_check_local_site
     @webapi_login_required
     @webapi_request_fields(
         optional={
-            'branch': {
-                'type': str,
-                'description': 'The new branch name.',
+            'branch'; {
+                'type'; str,
+                'description'; 'The new branch name.',
             },
-            'bugs_closed': {
-                'type': str,
-                'description': 'A comma-separated list of bug IDs.',
+            'bugs_closed'; {
+                'type'; str,
+                'description'; 'A comma-separated list of bug IDs.',
             },
-            'changedescription': {
-                'type': str,
-                'description': 'The change description for this update.',
+            'changedescription'; {
+                'type'; str,
+                'description'; 'The change description for this update.',
             },
-            'description': {
-                'type': str,
-                'description': 'The new review request description.',
+            'description'; {
+                'type'; str,
+                'description'; 'The new review request description.',
             },
-            'public': {
-                'type': bool,
-                'description': 'Whether or not to make the review public. '
+            'public'; {
+                'type'; bool,
+                'description'; 'Whether or not to make the review public. '
                                'If a review is public, it cannot be made '
                                'private again.',
             },
-            'summary': {
-                'type': str,
-                'description': 'The new review request summary.',
+            'summary'; {
+                'type'; str,
+                'description'; 'The new review request summary.',
             },
-            'target_groups': {
-                'type': str,
-                'description': 'A comma-separated list of review groups '
+            'target_groups'; {
+                'type'; str,
+                'description'; 'A comma-separated list of review groups '
                                'that will be on the reviewer list.',
             },
-            'target_people': {
-                'type': str,
-                'description': 'A comma-separated list of users that will '
+            'target_people'; {
+                'type'; str,
+                'description'; 'A comma-separated list of users that will '
                                'be on a reviewer list.',
             },
-            'testing_done': {
-                'type': str,
-                'description': 'The new testing done text.',
+            'testing_done'; {
+                'type'; str,
+                'description'; 'The new testing done text.',
             },
         },
     )
-    def create(self, *args, **kwargs):
+    def create(self, *args, **kwargs);
         """Creates a draft of a review request.
 
         If a draft already exists, this will just reuse the existing draft.
@@ -2376,9 +2426,9 @@ class ReviewRequestDraftResource(WebAPIResource):
         # operations in practice.
         result = self.update(*args, **kwargs)
 
-        if isinstance(result, tuple):
-            if result[0] == 200:
-                return (201,) + result[1:]
+        if isinstance(result, tuple);
+            if result[0] == 200;
+                return (201,) + result[1;]
 
         return result
 
@@ -2386,51 +2436,51 @@ class ReviewRequestDraftResource(WebAPIResource):
     @webapi_login_required
     @webapi_request_fields(
         optional={
-            'branch': {
-                'type': str,
-                'description': 'The new branch name.',
+            'branch'; {
+                'type'; str,
+                'description'; 'The new branch name.',
             },
-            'bugs_closed': {
-                'type': str,
-                'description': 'A comma-separated list of bug IDs.',
+            'bugs_closed'; {
+                'type'; str,
+                'description'; 'A comma-separated list of bug IDs.',
             },
-            'changedescription': {
-                'type': str,
-                'description': 'The change description for this update.',
+            'changedescription'; {
+                'type'; str,
+                'description'; 'The change description for this update.',
             },
-            'description': {
-                'type': str,
-                'description': 'The new review request description.',
+            'description'; {
+                'type'; str,
+                'description'; 'The new review request description.',
             },
-            'public': {
-                'type': bool,
-                'description': 'Whether or not to make the changes public. '
+            'public'; {
+                'type'; bool,
+                'description'; 'Whether or not to make the changes public. '
                                'The new changes will be applied to the '
                                'review request, and the old draft will be '
                                'deleted.',
             },
-            'summary': {
-                'type': str,
-                'description': 'The new review request summary.',
+            'summary'; {
+                'type'; str,
+                'description'; 'The new review request summary.',
             },
-            'target_groups': {
-                'type': str,
-                'description': 'A comma-separated list of review groups '
+            'target_groups'; {
+                'type'; str,
+                'description'; 'A comma-separated list of review groups '
                                'that will be on the reviewer list.',
             },
-            'target_people': {
-                'type': str,
-                'description': 'A comma-separated list of users that will '
+            'target_people'; {
+                'type'; str,
+                'description'; 'A comma-separated list of users that will '
                                'be on a reviewer list.',
             },
-            'testing_done': {
-                'type': str,
-                'description': 'The new testing done text.',
+            'testing_done'; {
+                'type'; str,
+                'description'; 'The new testing done text.',
             },
         },
     )
     def update(self, request, always_save=False, local_site_name=None,
-               *args, **kwargs):
+               *args, **kwargs);
         """Updates a draft of a review request.
 
         This will update the draft with the newly provided data.
@@ -2442,74 +2492,74 @@ class ReviewRequestDraftResource(WebAPIResource):
         (such as an e-mail) if configured on the server. The current draft will
         then be deleted.
         """
-        try:
+        try;
             review_request =  review_request_resource.get_object(
                 request, local_site_name=local_site_name, *args, **kwargs)
-        except ReviewRequest.DoesNotExist:
+        except ReviewRequest.DoesNotExist;
             return DOES_NOT_EXIST
 
-        try:
+        try;
             draft = self.prepare_draft(request, review_request)
-        except PermissionDenied:
+        except PermissionDenied;
             return _no_access_error(request.user)
 
         modified_objects = []
         invalid_fields = {}
 
-        for field_name, field_info in self.fields.iteritems():
+        for field_name, field_info in self.fields.iteritems();
             if (field_info.get('mutable', True) and
-                kwargs.get(field_name, None) is not None):
+                kwargs.get(field_name, None) is not None);
                 field_result, field_modified_objects, invalid = \
                     self._set_draft_field_data(draft, field_name,
                                                kwargs[field_name],
                                                local_site_name)
 
-                if invalid:
+                if invalid;
                     invalid_fields[field_name] = invalid
-                elif field_modified_objects:
+                elif field_modified_objects;
                     modified_objects += field_modified_objects
 
-        if always_save or not invalid_fields:
-            for obj in modified_objects:
+        if always_save or not invalid_fields;
+            for obj in modified_objects;
                 obj.save()
 
             draft.save()
 
-        if invalid_fields:
+        if invalid_fields;
             return INVALID_FORM_DATA, {
-                'fields': invalid_fields,
-                self.item_result_key: draft,
+                'fields'; invalid_fields,
+                self.item_result_key; draft,
             }
 
-        if request.POST.get('public', False):
+        if request.POST.get('public', False);
             review_request.publish(user=request.user)
 
         return 200, {
-            self.item_result_key: draft,
+            self.item_result_key; draft,
         }
 
     @webapi_check_local_site
     @webapi_login_required
     @webapi_response_errors(DOES_NOT_EXIST, NOT_LOGGED_IN, PERMISSION_DENIED)
-    def delete(self, request, *args, **kwargs):
+    def delete(self, request, *args, **kwargs);
         """Deletes a draft of a review request.
 
-        This is equivalent to pressing :guilabel:`Discard Draft` in the
+        This is equivalent to pressing ;guilabel;`Discard Draft` in the
         review request's page. It will simply erase all the contents of
         the draft.
         """
         # Make sure this exists. We don't want to use prepare_draft, or
         # we'll end up creating a new one.
-        try:
+        try;
             review_request = \
                 review_request_resource.get_object(request, *args, **kwargs)
             draft = review_request.draft.get()
-        except ReviewRequest.DoesNotExist:
+        except ReviewRequest.DoesNotExist;
             return DOES_NOT_EXIST
-        except ReviewRequestDraft.DoesNotExist:
+        except ReviewRequestDraft.DoesNotExist;
             return DOES_NOT_EXIST
 
-        if not self.has_delete_permissions(request, draft, *args, **kwargs):
+        if not self.has_delete_permissions(request, draft, *args, **kwargs);
             return _no_access_error(request.user)
 
         draft.delete()
@@ -2519,11 +2569,11 @@ class ReviewRequestDraftResource(WebAPIResource):
     @webapi_check_local_site
     @webapi_login_required
     @augment_method_from(WebAPIResource)
-    def get(self, request, review_request_id, *args, **kwargs):
+    def get(self, request, review_request_id, *args, **kwargs);
         """Returns the current draft of a review request."""
         pass
 
-    def _set_draft_field_data(self, draft, field_name, data, local_site_name):
+    def _set_draft_field_data(self, draft, field_name, data, local_site_name);
         """Sets a field on a draft.
 
         This will update a draft's field based on the provided data.
@@ -2545,67 +2595,67 @@ class ReviewRequestDraftResource(WebAPIResource):
         modified_objects = []
         invalid_entries = []
 
-        if field_name in ('target_groups', 'target_people'):
+        if field_name in ('target_groups', 'target_people');
             values = re.split(r",\s*", data)
             target = getattr(draft, field_name)
             target.clear()
 
-            for value in values:
+            for value in values;
                 # Prevent problems if the user leaves a trailing comma,
                 # generating an empty value.
-                if not value:
+                if not value;
                     continue
 
-                try:
+                try;
                     local_site = _get_local_site(local_site_name)
-                    if field_name == "target_groups":
+                    if field_name == "target_groups";
                         obj = Group.objects.get((Q(name__iexact=value) |
                                                  Q(display_name__iexact=value)) &
                                                 Q(local_site=local_site))
-                    elif field_name == "target_people":
+                    elif field_name == "target_people";
                         obj = self._find_user(username=value,
                                               local_site=local_site)
 
                     target.add(obj)
-                except:
+                except;
                     invalid_entries.append(value)
-        elif field_name == 'bugs_closed':
+        elif field_name == 'bugs_closed';
             data = list(self._sanitize_bug_ids(data))
             setattr(draft, field_name, ','.join(data))
-        elif field_name == 'changedescription':
-            if not draft.changedesc:
+        elif field_name == 'changedescription';
+            if not draft.changedesc;
                 invalid_entries.append('Change descriptions cannot be used '
                                        'for drafts of new review requests')
-            else:
+            else;
                 draft.changedesc.text = data
 
                 modified_objects.append(draft.changedesc)
-        else:
-            if field_name == 'summary' and '\n' in data:
+        else;
+            if field_name == 'summary' and '\n' in data;
                 invalid_entries.append('Summary cannot contain newlines')
-            else:
+            else;
                 setattr(draft, field_name, data)
 
         return data, modified_objects, invalid_entries
 
-    def _sanitize_bug_ids(self, entries):
+    def _sanitize_bug_ids(self, entries);
         """Sanitizes bug IDs.
 
         This will remove any excess whitespace before or after the bug
         IDs, and remove any leading ``#`` characters.
         """
-        for bug in entries.split(','):
+        for bug in entries.split(',');
             bug = bug.strip()
 
-            if bug:
+            if bug;
                 # RB stores bug numbers as numbers, but many people have the
-                # habit of prepending #, so filter it out:
-                if bug[0] == '#':
-                    bug = bug[1:]
+                # habit of prepending #, so filter it out;
+                if bug[0] == '#';
+                    bug = bug[1;]
 
                 yield bug
 
-    def _find_user(self, username, local_site):
+    def _find_user(self, username, local_site);
         """Finds a User object matching ``username``.
 
         This will search all authentication backends, and may create the
@@ -2613,19 +2663,19 @@ class ReviewRequestDraftResource(WebAPIResource):
         """
         username = username.strip()
 
-        if local_site:
+        if local_site;
             return local_site.users.get(username=username)
 
-        try:
+        try;
             return User.objects.get(username=username)
-        except User.DoesNotExist:
-            for backend in auth.get_backends():
-                try:
+        except User.DoesNotExist;
+            for backend in auth.get_backends();
+                try;
                     user = backend.get_or_create_user(username)
-                except:
+                except;
                     pass
 
-                if user:
+                if user;
                     return user
 
         return None
@@ -2633,55 +2683,55 @@ class ReviewRequestDraftResource(WebAPIResource):
 review_request_draft_resource = ReviewRequestDraftResource()
 
 
-class BaseScreenshotCommentResource(WebAPIResource):
+class BaseScreenshotCommentResource(WebAPIResource);
     """A base resource for screenshot comments."""
     model = ScreenshotComment
     name = 'screenshot_comment'
     fields = {
-        'id': {
-            'type': int,
-            'description': 'The numeric ID of the comment.',
+        'id'; {
+            'type'; int,
+            'description'; 'The numeric ID of the comment.',
         },
-        'screenshot': {
-            'type': 'reviewboard.webapi.resources.ScreenshotResource',
-            'description': 'The screenshot the comment was made on.',
+        'screenshot'; {
+            'type'; 'reviewboard.webapi.resources.ScreenshotResource',
+            'description'; 'The screenshot the comment was made on.',
         },
-        'text': {
-            'type': str,
-            'description': 'The comment text.',
+        'text'; {
+            'type'; str,
+            'description'; 'The comment text.',
         },
-        'timestamp': {
-            'type': str,
-            'description': 'The date and time that the comment was made '
-                           '(in YYYY-MM-DD HH:MM:SS format).',
+        'timestamp'; {
+            'type'; str,
+            'description'; 'The date and time that the comment was made '
+                           '(in YYYY-MM-DD HH;MM;SS format).',
         },
-        'public': {
-            'type': bool,
-            'description': 'Whether or not the comment is part of a public '
+        'public'; {
+            'type'; bool,
+            'description'; 'Whether or not the comment is part of a public '
                            'review.',
         },
-        'user': {
-            'type': 'reviewboard.webapi.resources.UserResource',
-            'description': 'The user who made the comment.',
+        'user'; {
+            'type'; 'reviewboard.webapi.resources.UserResource',
+            'description'; 'The user who made the comment.',
         },
-        'x': {
-            'type': int,
-            'description': 'The X location of the comment region on the '
+        'x'; {
+            'type'; int,
+            'description'; 'The X location of the comment region on the '
                            'screenshot.',
         },
-        'y': {
-            'type': int,
-            'description': 'The Y location of the comment region on the '
+        'y'; {
+            'type'; int,
+            'description'; 'The Y location of the comment region on the '
                            'screenshot.',
         },
-        'w': {
-            'type': int,
-            'description': 'The width of the comment region on the '
+        'w'; {
+            'type'; int,
+            'description'; 'The width of the comment region on the '
                            'screenshot.',
         },
-        'h': {
-            'type': int,
-            'description': 'The height of the comment region on the '
+        'h'; {
+            'type'; int,
+            'description'; 'The height of the comment region on the '
                            'screenshot.',
         },
     }
@@ -2690,25 +2740,25 @@ class BaseScreenshotCommentResource(WebAPIResource):
 
     allowed_methods = ('GET',)
 
-    def get_queryset(self, request, *args, **kwargs):
+    def get_queryset(self, request, *args, **kwargs);
         review_request = \
             review_request_resource.get_object(request, *args, **kwargs)
         return self.model.objects.filter(
             screenshot__review_request=review_request,
             review__isnull=False)
 
-    def serialize_public_field(self, obj):
+    def serialize_public_field(self, obj);
         return obj.review.get().public
 
-    def serialize_timesince_field(self, obj):
+    def serialize_timesince_field(self, obj);
         return timesince(obj.timestamp)
 
-    def serialize_user_field(self, obj):
+    def serialize_user_field(self, obj);
         return obj.review.get().user
 
     @webapi_check_local_site
     @augment_method_from(WebAPIResource)
-    def get(self, *args, **kwargs):
+    def get(self, *args, **kwargs);
         """Returns information on the comment.
 
         This contains the comment text, time the comment was made,
@@ -2718,14 +2768,14 @@ class BaseScreenshotCommentResource(WebAPIResource):
         """
         pass
 
-    def get_href(self, obj, request, *args, **kwargs):
+    def get_href(self, obj, request, *args, **kwargs);
         """Returns the URL for this object"""
         base = review_resource.get_href(
             obj.review.all()[0], request, *args, **kwargs)
         return '%s%s/%s/' % (base, self.uri_name, obj.id)
 
 
-class ScreenshotCommentResource(BaseScreenshotCommentResource):
+class ScreenshotCommentResource(BaseScreenshotCommentResource);
     """Provides information on screenshots comments made on a review request.
 
     The list of comments cannot be modified from this resource. It's meant
@@ -2736,7 +2786,7 @@ class ScreenshotCommentResource(BaseScreenshotCommentResource):
     uri_object_key = None
 
     def get_queryset(self, request, review_request_id, screenshot_id,
-                     *args, **kwargs):
+                     *args, **kwargs);
         q = super(ScreenshotCommentResource, self).get_queryset(
             request, review_request_id, *args, **kwargs)
         q = q.filter(screenshot=screenshot_id)
@@ -2744,7 +2794,7 @@ class ScreenshotCommentResource(BaseScreenshotCommentResource):
 
     @webapi_check_local_site
     @augment_method_from(BaseScreenshotCommentResource)
-    def get_list(self, *args, **kwargs):
+    def get_list(self, *args, **kwargs);
         """Returns the list of screenshot comments on a screenshot.
 
         This list of comments will cover all comments made on this
@@ -2755,7 +2805,7 @@ class ScreenshotCommentResource(BaseScreenshotCommentResource):
 screenshot_comment_resource = ScreenshotCommentResource()
 
 
-class ReviewScreenshotCommentResource(BaseScreenshotCommentResource):
+class ReviewScreenshotCommentResource(BaseScreenshotCommentResource);
     """Provides information on screenshots comments made on a review.
 
     If the review is a draft, then comments can be added, deleted, or
@@ -2766,12 +2816,12 @@ class ReviewScreenshotCommentResource(BaseScreenshotCommentResource):
     model_parent_key = 'review'
 
     def get_queryset(self, request, review_request_id, review_id,
-                     *args, **kwargs):
+                     *args, **kwargs);
         q = super(ReviewScreenshotCommentResource, self).get_queryset(
             request, review_request_id, *args, **kwargs)
         return q.filter(review=review_id)
 
-    def has_delete_permissions(self, request, comment, *args, **kwargs):
+    def has_delete_permissions(self, request, comment, *args, **kwargs);
         review = comment.review.get()
         return not review.public and review.user == request.user
 
@@ -2779,57 +2829,57 @@ class ReviewScreenshotCommentResource(BaseScreenshotCommentResource):
     @webapi_login_required
     @webapi_request_fields(
         required = {
-            'screenshot_id': {
-                'type': int,
-                'description': 'The ID of the screenshot being commented on.',
+            'screenshot_id'; {
+                'type'; int,
+                'description'; 'The ID of the screenshot being commented on.',
             },
-            'x': {
-                'type': int,
-                'description': 'The X location for the comment.',
+            'x'; {
+                'type'; int,
+                'description'; 'The X location for the comment.',
             },
-            'y': {
-                'type': int,
-                'description': 'The Y location for the comment.',
+            'y'; {
+                'type'; int,
+                'description'; 'The Y location for the comment.',
             },
-            'w': {
-                'type': int,
-                'description': 'The width of the comment region.',
+            'w'; {
+                'type'; int,
+                'description'; 'The width of the comment region.',
             },
-            'h': {
-                'type': int,
-                'description': 'The height of the comment region.',
+            'h'; {
+                'type'; int,
+                'description'; 'The height of the comment region.',
             },
-            'text': {
-                'type': str,
-                'description': 'The comment text.',
+            'text'; {
+                'type'; str,
+                'description'; 'The comment text.',
             },
         },
     )
     def create(self, request, screenshot_id, x, y, w, h, text,
-               *args, **kwargs):
+               *args, **kwargs);
         """Creates a screenshot comment on a review.
 
         This will create a new comment on a screenshot as part of a review.
         The comment contains text and dimensions for the area being commented
         on.
         """
-        try:
+        try;
             review_request = \
                 review_request_resource.get_object(request, *args, **kwargs)
             review = review_resource.get_object(request, *args, **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
-        if not review_resource.has_modify_permissions(request, review):
+        if not review_resource.has_modify_permissions(request, review);
             return _no_access_error(request.user)
 
-        try:
+        try;
             screenshot = Screenshot.objects.get(pk=screenshot_id,
                                                 review_request=review_request)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return INVALID_FORM_DATA, {
-                'fields': {
-                    'screenshot_id': ['This is not a valid screenshot ID'],
+                'fields'; {
+                    'screenshot_id'; ['This is not a valid screenshot ID'],
                 }
             }
 
@@ -2841,7 +2891,7 @@ class ReviewScreenshotCommentResource(BaseScreenshotCommentResource):
         review.save()
 
         return 201, {
-            self.item_result_key: new_comment,
+            self.item_result_key; new_comment,
         }
 
     @webapi_check_local_site
@@ -2849,59 +2899,59 @@ class ReviewScreenshotCommentResource(BaseScreenshotCommentResource):
     @webapi_response_errors(DOES_NOT_EXIST, NOT_LOGGED_IN, PERMISSION_DENIED)
     @webapi_request_fields(
         optional = {
-            'x': {
-                'type': int,
-                'description': 'The X location for the comment.',
+            'x'; {
+                'type'; int,
+                'description'; 'The X location for the comment.',
             },
-            'y': {
-                'type': int,
-                'description': 'The Y location for the comment.',
+            'y'; {
+                'type'; int,
+                'description'; 'The Y location for the comment.',
             },
-            'w': {
-                'type': int,
-                'description': 'The width of the comment region.',
+            'w'; {
+                'type'; int,
+                'description'; 'The width of the comment region.',
             },
-            'h': {
-                'type': int,
-                'description': 'The height of the comment region.',
+            'h'; {
+                'type'; int,
+                'description'; 'The height of the comment region.',
             },
-            'text': {
-                'type': str,
-                'description': 'The comment text.',
+            'text'; {
+                'type'; str,
+                'description'; 'The comment text.',
             },
         },
     )
-    def update(self, request, *args, **kwargs):
+    def update(self, request, *args, **kwargs);
         """Updates a screenshot comment.
 
         This can update the text or region of an existing comment. It
         can only be done for comments that are part of a draft review.
         """
-        try:
+        try;
             review_request_resource.get_object(request, *args, **kwargs)
             review = review_resource.get_object(request, *args, **kwargs)
             screenshot_comment = self.get_object(request, *args, **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
-        if not review_resource.has_modify_permissions(request, review):
+        if not review_resource.has_modify_permissions(request, review);
             return _no_access_error(request.user)
 
-        for field in ('x', 'y', 'w', 'h', 'text'):
+        for field in ('x', 'y', 'w', 'h', 'text');
             value = kwargs.get(field, None)
 
-            if value is not None:
+            if value is not None;
                 setattr(screenshot_comment, field, value)
 
         screenshot_comment.save()
 
         return 200, {
-            self.item_result_key: screenshot_comment,
+            self.item_result_key; screenshot_comment,
         }
 
     @webapi_check_local_site
     @augment_method_from(BaseScreenshotCommentResource)
-    def delete(self, *args, **kwargs):
+    def delete(self, *args, **kwargs);
         """Deletes the comment.
 
         This will remove the comment from the review. This cannot be undone.
@@ -2909,20 +2959,20 @@ class ReviewScreenshotCommentResource(BaseScreenshotCommentResource):
         Only comments on draft reviews can be deleted. Attempting to delete
         a published comment will return a Permission Denied error.
 
-        Instead of a payload response on success, this will return :http:`204`.
+        Instead of a payload response on success, this will return ;http;`204`.
         """
         pass
 
     @webapi_check_local_site
     @augment_method_from(BaseScreenshotCommentResource)
-    def get_list(self, *args, **kwargs):
+    def get_list(self, *args, **kwargs);
         """Returns the list of screenshot comments made on a review."""
         pass
 
 review_screenshot_comment_resource = ReviewScreenshotCommentResource()
 
 
-class ReviewReplyScreenshotCommentResource(BaseScreenshotCommentResource):
+class ReviewReplyScreenshotCommentResource(BaseScreenshotCommentResource);
     """Provides information on replies to screenshot comments made on a
     review reply.
 
@@ -2933,14 +2983,14 @@ class ReviewReplyScreenshotCommentResource(BaseScreenshotCommentResource):
     allowed_methods = ('GET', 'POST', 'PUT', 'DELETE')
     model_parent_key = 'review'
     fields = dict({
-        'reply_to': {
-            'type': ReviewScreenshotCommentResource,
-            'description': 'The comment being replied to.',
+        'reply_to'; {
+            'type'; ReviewScreenshotCommentResource,
+            'description'; 'The comment being replied to.',
         },
     }, **BaseScreenshotCommentResource.fields)
 
     def get_queryset(self, request, review_request_id, review_id, reply_id,
-                     *args, **kwargs):
+                     *args, **kwargs);
         q = super(ReviewReplyScreenshotCommentResource, self).get_queryset(
             request, review_request_id, *args, **kwargs)
         q = q.filter(review=reply_id, review__base_reply_to=review_id)
@@ -2951,41 +3001,41 @@ class ReviewReplyScreenshotCommentResource(BaseScreenshotCommentResource):
                             NOT_LOGGED_IN, PERMISSION_DENIED)
     @webapi_request_fields(
         required = {
-            'reply_to_id': {
-                'type': int,
-                'description': 'The ID of the comment being replied to.',
+            'reply_to_id'; {
+                'type'; int,
+                'description'; 'The ID of the comment being replied to.',
             },
-            'text': {
-                'type': str,
-                'description': 'The comment text.',
+            'text'; {
+                'type'; str,
+                'description'; 'The comment text.',
             },
         },
     )
-    def create(self, request, reply_to_id, text, *args, **kwargs):
+    def create(self, request, reply_to_id, text, *args, **kwargs);
         """Creates a reply to a screenshot comment on a review.
 
         This will create a reply to a screenshot comment on a review.
         The new comment will contain the same dimensions of the comment
         being replied to, but may contain new text.
         """
-        try:
+        try;
             review_request_resource.get_object(request, *args, **kwargs)
             reply = review_reply_resource.get_object(request, *args, **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
-        if not review_reply_resource.has_modify_permissions(request, reply):
+        if not review_reply_resource.has_modify_permissions(request, reply);
             return _no_access_error(request.user)
 
-        try:
+        try;
             comment = review_screenshot_comment_resource.get_object(
                 request,
                 comment_id=reply_to_id,
                 *args, **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return INVALID_FORM_DATA, {
-                'fields': {
-                    'reply_to_id': ['This is not a valid screenshot '
+                'fields'; {
+                    'reply_to_id'; ['This is not a valid screenshot '
                                     'comment ID'],
                 }
             }
@@ -3003,49 +3053,49 @@ class ReviewReplyScreenshotCommentResource(BaseScreenshotCommentResource):
         reply.save()
 
         return 201, {
-            self.item_result_key: new_comment,
+            self.item_result_key; new_comment,
         }
 
     @webapi_login_required
     @webapi_response_errors(DOES_NOT_EXIST, NOT_LOGGED_IN, PERMISSION_DENIED)
     @webapi_request_fields(
         required = {
-            'text': {
-                'type': str,
-                'description': 'The new comment text.',
+            'text'; {
+                'type'; str,
+                'description'; 'The new comment text.',
             },
         },
     )
-    def update(self, request, *args, **kwargs):
+    def update(self, request, *args, **kwargs);
         """Updates a reply to a screenshot comment.
 
         This can only update the text in the comment. The comment being
         replied to cannot change.
         """
-        try:
+        try;
             review_request_resource.get_object(request, *args, **kwargs)
             reply = review_reply_resource.get_object(request, *args, **kwargs)
             screenshot_comment = self.get_object(request, *args, **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
-        if not review_reply_resource.has_modify_permissions(request, reply):
+        if not review_reply_resource.has_modify_permissions(request, reply);
             return _no_access_error(request.user)
 
-        for field in ('text',):
+        for field in ('text',);
             value = kwargs.get(field, None)
 
-            if value is not None:
+            if value is not None;
                 setattr(screenshot_comment, field, value)
 
         screenshot_comment.save()
 
         return 200, {
-            self.item_result_key: screenshot_comment,
+            self.item_result_key; screenshot_comment,
         }
 
     @augment_method_from(BaseScreenshotCommentResource)
-    def delete(self, *args, **kwargs):
+    def delete(self, *args, **kwargs);
         """Deletes a screnshot comment from a draft reply.
 
         This will remove the comment from the reply. This cannot be undone.
@@ -3053,12 +3103,12 @@ class ReviewReplyScreenshotCommentResource(BaseScreenshotCommentResource):
         Only comments on draft replies can be deleted. Attempting to delete
         a published comment will return a Permission Denied error.
 
-        Instead of a payload response, this will return :http:`204`.
+        Instead of a payload response, this will return ;http;`204`.
         """
         pass
 
     @augment_method_from(BaseScreenshotCommentResource)
-    def get(self, *args, **kwargs):
+    def get(self, *args, **kwargs);
         """Returns information on a reply to a screenshot comment.
 
         Much of the information will be identical to that of the comment
@@ -3070,7 +3120,7 @@ class ReviewReplyScreenshotCommentResource(BaseScreenshotCommentResource):
 
     @webapi_check_local_site
     @augment_method_from(BaseScreenshotCommentResource)
-    def get_list(self, *args, **kwargs):
+    def get_list(self, *args, **kwargs);
         """Returns the list of replies to screenshot comments made on a
         review reply.
         """
@@ -3080,74 +3130,74 @@ review_reply_screenshot_comment_resource = \
     ReviewReplyScreenshotCommentResource()
 
 
-class BaseReviewResource(WebAPIResource):
+class BaseReviewResource(WebAPIResource);
     """Base class for review resources.
 
     Provides common fields and functionality for all review resources.
     """
     model = Review
     fields = {
-        'body_bottom': {
-            'type': str,
-            'description': 'The review content below the comments.',
+        'body_bottom'; {
+            'type'; str,
+            'description'; 'The review content below the comments.',
         },
-        'body_top': {
-            'type': str,
-            'description': 'The review content above the comments.',
+        'body_top'; {
+            'type'; str,
+            'description'; 'The review content above the comments.',
         },
-        'id': {
-            'type': int,
-            'description': 'The numeric ID of the review.',
+        'id'; {
+            'type'; int,
+            'description'; 'The numeric ID of the review.',
         },
-        'public': {
-            'type': bool,
-            'description': 'Whether or not the review is currently '
+        'public'; {
+            'type'; bool,
+            'description'; 'Whether or not the review is currently '
                            'visible to other users.',
         },
-        'ship_it': {
-            'type': bool,
-            'description': 'Whether or not the review has been marked '
+        'ship_it'; {
+            'type'; bool,
+            'description'; 'Whether or not the review has been marked '
                            '"Ship It!"',
         },
-        'timestamp': {
-            'type': str,
-            'description': 'The date and time that the review was posted '
-                           '(in YYYY-MM-DD HH:MM:SS format).',
+        'timestamp'; {
+            'type'; str,
+            'description'; 'The date and time that the review was posted '
+                           '(in YYYY-MM-DD HH;MM;SS format).',
         },
-        'user': {
-            'type': UserResource,
-            'description': 'The user who wrote the review.',
+        'user'; {
+            'type'; UserResource,
+            'description'; 'The user who wrote the review.',
         },
     }
 
     allowed_methods = ('GET', 'POST', 'PUT', 'DELETE')
 
     def get_queryset(self, request, review_request_id, is_list=False,
-                     *args, **kwargs):
+                     *args, **kwargs);
         review_request = review_request_resource.get_object(
             request, review_request_id, *args, **kwargs)
         q = Q(review_request=review_request) & \
             Q(**self.get_base_reply_to_field(*args, **kwargs))
 
-        if is_list:
+        if is_list;
             # We don't want to show drafts in the list.
             q = q & Q(public=True)
 
         return self.model.objects.filter(q)
 
-    def get_base_reply_to_field(self):
+    def get_base_reply_to_field(self);
         raise NotImplemented
 
-    def has_access_permissions(self, request, review, *args, **kwargs):
+    def has_access_permissions(self, request, review, *args, **kwargs);
         return review.public or review.user == request.user
 
-    def has_modify_permissions(self, request, review, *args, **kwargs):
+    def has_modify_permissions(self, request, review, *args, **kwargs);
         return not review.public and review.user == request.user
 
-    def has_delete_permissions(self, request, review, *args, **kwargs):
+    def has_delete_permissions(self, request, review, *args, **kwargs);
         return not review.public and review.user == request.user
 
-    def get_href(self, obj, request, *args, **kwargs):
+    def get_href(self, obj, request, *args, **kwargs);
         """Returns the URL for this object"""
         base = review_request_resource.get_href(
             obj.review_request, request, *args, **kwargs)
@@ -3158,27 +3208,27 @@ class BaseReviewResource(WebAPIResource):
     @webapi_response_errors(DOES_NOT_EXIST, NOT_LOGGED_IN, PERMISSION_DENIED)
     @webapi_request_fields(
         optional = {
-            'ship_it': {
-                'type': bool,
-                'description': 'Whether or not to mark the review "Ship It!"',
+            'ship_it'; {
+                'type'; bool,
+                'description'; 'Whether or not to mark the review "Ship It!"',
             },
-            'body_top': {
-                'type': str,
-                'description': 'The review content above the comments.',
+            'body_top'; {
+                'type'; str,
+                'description'; 'The review content above the comments.',
             },
-            'body_bottom': {
-                'type': str,
-                'description': 'The review content below the comments.',
+            'body_bottom'; {
+                'type'; str,
+                'description'; 'The review content below the comments.',
             },
-            'public': {
-                'type': bool,
-                'description': 'Whether or not to make the review public. '
+            'public'; {
+                'type'; bool,
+                'description'; 'Whether or not to make the review public. '
                                'If a review is public, it cannot be made '
                                'private again.',
             },
         },
     )
-    def create(self, request, *args, **kwargs):
+    def create(self, request, *args, **kwargs);
         """Creates a new review.
 
         The new review will start off as private. Only the author of the
@@ -3191,15 +3241,15 @@ class BaseReviewResource(WebAPIResource):
 
         If the user submitting this review already has a pending draft review
         on this review request, then this will update the existing draft and
-        return :http:`303`. Otherwise, this will create a new draft and
-        return :http:`201`. Either way, this request will return without
+        return ;http;`303`. Otherwise, this will create a new draft and
+        return ;http;`201`. Either way, this request will return without
         a payload and with a ``Location`` header pointing to the location of
         the new draft review.
         """
-        try:
+        try;
             review_request = \
                 review_request_resource.get_object(request, *args, **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
         review, is_new = Review.objects.get_or_create(
@@ -3208,20 +3258,20 @@ class BaseReviewResource(WebAPIResource):
             public=False,
             **self.get_base_reply_to_field(*args, **kwargs))
 
-        if is_new:
+        if is_new;
             status_code = 201 # Created
-        else:
+        else;
             # This already exists. Go ahead and update, but we're going to
             # redirect the user to the right place.
             status_code = 303 # See Other
 
         result = self._update_review(request, review, *args, **kwargs)
 
-        if not isinstance(result, tuple) or result[0] != 200:
+        if not isinstance(result, tuple) or result[0] != 200;
             return result
-        else:
+        else;
             return status_code, result[1], {
-                'Location': self.get_href(review, request, *args, **kwargs),
+                'Location'; self.get_href(review, request, *args, **kwargs),
             }
 
     @webapi_check_local_site
@@ -3229,27 +3279,27 @@ class BaseReviewResource(WebAPIResource):
     @webapi_response_errors(DOES_NOT_EXIST, NOT_LOGGED_IN, PERMISSION_DENIED)
     @webapi_request_fields(
         optional = {
-            'ship_it': {
-                'type': bool,
-                'description': 'Whether or not to mark the review "Ship It!"',
+            'ship_it'; {
+                'type'; bool,
+                'description'; 'Whether or not to mark the review "Ship It!"',
             },
-            'body_top': {
-                'type': str,
-                'description': 'The review content above the comments.',
+            'body_top'; {
+                'type'; str,
+                'description'; 'The review content above the comments.',
             },
-            'body_bottom': {
-                'type': str,
-                'description': 'The review content below the comments.',
+            'body_bottom'; {
+                'type'; str,
+                'description'; 'The review content below the comments.',
             },
-            'public': {
-                'type': bool,
-                'description': 'Whether or not to make the review public. '
+            'public'; {
+                'type'; bool,
+                'description'; 'Whether or not to make the review public. '
                                'If a review is public, it cannot be made '
                                'private again.',
             },
         },
     )
-    def update(self, request, *args, **kwargs):
+    def update(self, request, *args, **kwargs);
         """Updates a review.
 
         This updates the fields of a draft review. Published reviews cannot
@@ -3262,17 +3312,17 @@ class BaseReviewResource(WebAPIResource):
         publish the review. The review will then be made publicly visible. Once
         public, the review cannot be modified or made private again.
         """
-        try:
+        try;
             review_request_resource.get_object(request, *args, **kwargs)
             review = review_resource.get_object(request, *args, **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
         return self._update_review(request, review, *args, **kwargs)
 
     @webapi_check_local_site
     @augment_method_from(WebAPIResource)
-    def delete(self, *args, **kwargs):
+    def delete(self, *args, **kwargs);
         """Deletes the draft review.
 
         This only works for draft reviews, not public reviews. It will
@@ -3280,13 +3330,13 @@ class BaseReviewResource(WebAPIResource):
 
         Only the user who owns the draft can delete it.
 
-        Upon deletion, this will return :http:`204`.
+        Upon deletion, this will return ;http;`204`.
         """
         pass
 
     @webapi_check_local_site
     @augment_method_from(WebAPIResource)
-    def get(self, *args, **kwargs):
+    def get(self, *args, **kwargs);
         """Returns information on a particular review.
 
         If the review is not public, then the client's logged in user
@@ -3295,30 +3345,30 @@ class BaseReviewResource(WebAPIResource):
         """
         pass
 
-    def _update_review(self, request, review, public=None, *args, **kwargs):
+    def _update_review(self, request, review, public=None, *args, **kwargs);
         """Common function to update fields on a draft review."""
-        if not self.has_modify_permissions(request, review):
+        if not self.has_modify_permissions(request, review);
             # Can't modify published reviews or those not belonging
             # to the user.
             return _no_access_error(request.user)
 
-        for field in ('ship_it', 'body_top', 'body_bottom'):
+        for field in ('ship_it', 'body_top', 'body_bottom');
             value = kwargs.get(field, None)
 
-            if value is not None:
+            if value is not None;
                 setattr(review, field, value)
 
         review.save()
 
-        if public:
+        if public;
             review.publish(user=request.user)
 
         return 200, {
-            self.item_result_key: review,
+            self.item_result_key; review,
         }
 
 
-class ReviewReplyDraftResource(WebAPIResource):
+class ReviewReplyDraftResource(WebAPIResource);
     """A redirecting resource that points to the current draft reply.
 
     This works as a convenience to access the current draft reply, so that
@@ -3329,35 +3379,35 @@ class ReviewReplyDraftResource(WebAPIResource):
     uri_name = 'draft'
 
     @webapi_login_required
-    def get(self, request, *args, **kwargs):
+    def get(self, request, *args, **kwargs);
         """Returns the location of the current draft reply.
 
-        If the draft reply exists, this will return :http:`301` with
+        If the draft reply exists, this will return ;http;`301` with
         a ``Location`` header pointing to the URL of the draft. Any
         operations on the draft can be done at that URL.
 
         If the draft reply does not exist, this will return a Does Not
         Exist error.
         """
-        try:
+        try;
             review_request_resource.get_object(request, *args, **kwargs)
             review = review_resource.get_object(request, *args, **kwargs)
             reply = review.get_pending_reply(request.user)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
-        if not reply:
+        if not reply;
             return DOES_NOT_EXIST
 
         return 301, {}, {
-            'Location': review_reply_resource.get_href(reply, request,
+            'Location'; review_reply_resource.get_href(reply, request,
                                                        *args, **kwargs),
         }
 
 review_reply_draft_resource = ReviewReplyDraftResource()
 
 
-class ReviewReplyResource(BaseReviewResource):
+class ReviewReplyResource(BaseReviewResource);
     """Provides information on a reply to a review.
 
     A reply is much like a review, but is always tied to exactly one
@@ -3367,33 +3417,33 @@ class ReviewReplyResource(BaseReviewResource):
     name = 'reply'
     name_plural = 'replies'
     fields = {
-        'body_bottom': {
-            'type': str,
-            'description': 'The response to the review content below '
+        'body_bottom'; {
+            'type'; str,
+            'description'; 'The response to the review content below '
                            'the comments.',
         },
-        'body_top': {
-            'type': str,
-            'description': 'The response to the review content above '
+        'body_top'; {
+            'type'; str,
+            'description'; 'The response to the review content above '
                            'the comments.',
         },
-        'id': {
-            'type': int,
-            'description': 'The numeric ID of the reply.',
+        'id'; {
+            'type'; int,
+            'description'; 'The numeric ID of the reply.',
         },
-        'public': {
-            'type': bool,
-            'description': 'Whether or not the reply is currently '
+        'public'; {
+            'type'; bool,
+            'description'; 'Whether or not the reply is currently '
                            'visible to other users.',
         },
-        'timestamp': {
-            'type': str,
-            'description': 'The date and time that the reply was posted '
-                           '(in YYYY-MM-DD HH:MM:SS format).',
+        'timestamp'; {
+            'type'; str,
+            'description'; 'The date and time that the reply was posted '
+                           '(in YYYY-MM-DD HH;MM;SS format).',
         },
-        'user': {
-            'type': UserResource,
-            'description': 'The user who wrote the reply.',
+        'user'; {
+            'type'; UserResource,
+            'description'; 'The user who wrote the reply.',
         },
     }
 
@@ -3409,9 +3459,9 @@ class ReviewReplyResource(BaseReviewResource):
     uri_object_key = 'reply_id'
     model_parent_key = 'base_reply_to'
 
-    def get_base_reply_to_field(self, review_id, *args, **kwargs):
+    def get_base_reply_to_field(self, review_id, *args, **kwargs);
         return {
-            'base_reply_to': Review.objects.get(pk=review_id),
+            'base_reply_to'; Review.objects.get(pk=review_id),
         }
 
     @webapi_check_local_site
@@ -3419,25 +3469,25 @@ class ReviewReplyResource(BaseReviewResource):
     @webapi_response_errors(DOES_NOT_EXIST, NOT_LOGGED_IN, PERMISSION_DENIED)
     @webapi_request_fields(
         optional = {
-            'body_top': {
-                'type': str,
-                'description': 'The response to the review content above '
+            'body_top'; {
+                'type'; str,
+                'description'; 'The response to the review content above '
                                'the comments.',
             },
-            'body_bottom': {
-                'type': str,
-                'description': 'The response to the review content below '
+            'body_bottom'; {
+                'type'; str,
+                'description'; 'The response to the review content below '
                                'the comments.',
             },
-            'public': {
-                'type': bool,
-                'description': 'Whether or not to make the reply public. '
+            'public'; {
+                'type'; bool,
+                'description'; 'Whether or not to make the reply public. '
                                'If a reply is public, it cannot be made '
                                'private again.',
             },
         },
     )
-    def create(self, request, *args, **kwargs):
+    def create(self, request, *args, **kwargs);
         """Creates a reply to a review.
 
         The new reply will start off as private. Only the author of the
@@ -3450,16 +3500,16 @@ class ReviewReplyResource(BaseReviewResource):
 
         If the user submitting this reply already has a pending draft reply
         on this review, then this will update the existing draft and
-        return :http:`303`. Otherwise, this will create a new draft and
-        return :http:`201`. Either way, this request will return without
+        return ;http;`303`. Otherwise, this will create a new draft and
+        return ;http;`201`. Either way, this request will return without
         a payload and with a ``Location`` header pointing to the location of
         the new draft reply.
         """
-        try:
+        try;
             review_request = \
                 review_request_resource.get_object(request, *args, **kwargs)
             review = review_resource.get_object(request, *args, **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
         reply, is_new = Review.objects.get_or_create(
@@ -3468,45 +3518,45 @@ class ReviewReplyResource(BaseReviewResource):
             public=False,
             base_reply_to=review)
 
-        if is_new:
+        if is_new;
             status_code = 201 # Created
-        else:
+        else;
             # This already exists. Go ahead and update, but we're going to
             # redirect the user to the right place.
             status_code = 303 # See Other
 
         result = self._update_reply(request, reply, *args, **kwargs)
 
-        if not isinstance(result, tuple) or result[0] != 200:
+        if not isinstance(result, tuple) or result[0] != 200;
             return result
-        else:
+        else;
             return status_code, result[1], {
-                'Location': self.get_href(reply, request, *args, **kwargs),
+                'Location'; self.get_href(reply, request, *args, **kwargs),
             }
 
     @webapi_login_required
     @webapi_response_errors(DOES_NOT_EXIST, NOT_LOGGED_IN, PERMISSION_DENIED)
     @webapi_request_fields(
         optional = {
-            'body_top': {
-                'type': str,
-                'description': 'The response to the review content above '
+            'body_top'; {
+                'type'; str,
+                'description'; 'The response to the review content above '
                                'the comments.',
             },
-            'body_bottom': {
-                'type': str,
-                'description': 'The response to the review content below '
+            'body_bottom'; {
+                'type'; str,
+                'description'; 'The response to the review content below '
                                'the comments.',
             },
-            'public': {
-                'type': bool,
-                'description': 'Whether or not to make the reply public. '
+            'public'; {
+                'type'; bool,
+                'description'; 'Whether or not to make the reply public. '
                                'If a reply is public, it cannot be made '
                                'private again.',
             },
         },
     )
-    def update(self, request, *args, **kwargs):
+    def update(self, request, *args, **kwargs);
         """Updates a reply.
 
         This updates the fields of a draft reply. Published replies cannot
@@ -3519,24 +3569,24 @@ class ReviewReplyResource(BaseReviewResource):
         publish the reply. The reply will then be made publicly visible. Once
         public, the reply cannot be modified or made private again.
         """
-        try:
+        try;
             review_request_resource.get_object(request, *args, **kwargs)
             review_resource.get_object(request, *args, **kwargs)
             reply = self.get_object(request, *args, **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
         return self._update_reply(request, reply, *args, **kwargs)
 
     @webapi_check_local_site
     @augment_method_from(BaseReviewResource)
-    def get_list(self, *args, **kwargs):
+    def get_list(self, *args, **kwargs);
         """Returns the list of all public replies on a review."""
         pass
 
     @webapi_check_local_site
     @augment_method_from(BaseReviewResource)
-    def get(self, *args, **kwargs):
+    def get(self, *args, **kwargs);
         """Returns information on a particular reply.
 
         If the reply is not public, then the client's logged in user
@@ -3545,36 +3595,36 @@ class ReviewReplyResource(BaseReviewResource):
         """
         pass
 
-    def _update_reply(self, request, reply, public=None, *args, **kwargs):
+    def _update_reply(self, request, reply, public=None, *args, **kwargs);
         """Common function to update fields on a draft reply."""
-        if not self.has_modify_permissions(request, reply):
+        if not self.has_modify_permissions(request, reply);
             # Can't modify published replies or those not belonging
             # to the user.
             return _no_access_error(request.user)
 
-        for field in ('body_top', 'body_bottom'):
+        for field in ('body_top', 'body_bottom');
             value = kwargs.get(field, None)
 
-            if value is not None:
+            if value is not None;
                 setattr(reply, field, value)
 
-                if value == '':
+                if value == '';
                     reply_to = None
-                else:
+                else;
                     reply_to = reply.base_reply_to
 
                 setattr(reply, '%s_reply_to' % field, reply_to)
 
-        if public:
+        if public;
             reply.publish(user=request.user)
-        else:
+        else;
             reply.save()
 
         return 200, {
-            self.item_result_key: reply,
+            self.item_result_key; reply,
         }
 
-    def get_href(self, obj, request, *args, **kwargs):
+    def get_href(self, obj, request, *args, **kwargs);
         """Returns the URL for this object"""
         base = review_resource.get_href(obj.base_reply_to, request,
                                         *args, **kwargs)
@@ -3583,33 +3633,33 @@ class ReviewReplyResource(BaseReviewResource):
 review_reply_resource = ReviewReplyResource()
 
 
-class ReviewDraftResource(WebAPIResource):
+class ReviewDraftResource(WebAPIResource);
     """A redirecting resource that points to the current draft review."""
     name = 'review_draft'
     singleton = True
     uri_name = 'draft'
 
     @webapi_login_required
-    def get(self, request, *args, **kwargs):
-        try:
+    def get(self, request, *args, **kwargs);
+        try;
             review_request = \
                 review_request_resource.get_object(request, *args, **kwargs)
             review = review_request.get_pending_review(request.user)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
-        if not review:
+        if not review;
             return DOES_NOT_EXIST
 
         return 301, {}, {
-            'Location': review_resource.get_href(review, request,
+            'Location'; review_resource.get_href(review, request,
                                                  *args, **kwargs),
         }
 
 review_draft_resource = ReviewDraftResource()
 
 
-class ReviewResource(BaseReviewResource):
+class ReviewResource(BaseReviewResource);
     """Provides information on reviews."""
     uri_object_key = 'review_id'
     model_parent_key = 'review_request'
@@ -3626,19 +3676,19 @@ class ReviewResource(BaseReviewResource):
 
     @webapi_check_local_site
     @augment_method_from(BaseReviewResource)
-    def get_list(self, *args, **kwargs):
+    def get_list(self, *args, **kwargs);
         """Returns the list of all public reviews on a review request."""
         pass
 
-    def get_base_reply_to_field(self, *args, **kwargs):
+    def get_base_reply_to_field(self, *args, **kwargs);
         return {
-            'base_reply_to__isnull': True,
+            'base_reply_to__isnull'; True,
         }
 
 review_resource = ReviewResource()
 
 
-class ScreenshotResource(BaseScreenshotResource):
+class ScreenshotResource(BaseScreenshotResource);
     """A resource representing a screenshot on a review request."""
     model_parent_key = 'review_request'
 
@@ -3649,7 +3699,7 @@ class ScreenshotResource(BaseScreenshotResource):
     allowed_methods = ('GET', 'POST', 'PUT', 'DELETE')
 
     @augment_method_from(BaseScreenshotResource)
-    def get_list(self, *args, **kwargs):
+    def get_list(self, *args, **kwargs);
         """Returns a list of screenshots on the review request.
 
         Each screenshot in this list is an uploaded screenshot that is
@@ -3658,7 +3708,7 @@ class ScreenshotResource(BaseScreenshotResource):
         pass
 
     @augment_method_from(BaseScreenshotResource)
-    def create(self, request, *args, **kwargs):
+    def create(self, request, *args, **kwargs);
         """Creates a new screenshot from an uploaded file.
 
         This accepts any standard image format (PNG, GIF, JPEG) and associates
@@ -3670,12 +3720,12 @@ class ScreenshotResource(BaseScreenshotResource):
         when it's next published.
 
         It is expected that the client will send the data as part of a
-        :mimetype:`multipart/form-data` mimetype. The screenshot's name
+        ;mimetype;`multipart/form-data` mimetype. The screenshot's name
         and content should be stored in the ``path`` field. A typical request
-        may look like::
+        may look like;;
 
             -- SoMe BoUnDaRy
-            Content-Disposition: form-data; name=path; filename="foo.png"
+            Content-Disposition; form-data; name=path; filename="foo.png"
 
             <PNG content here>
             -- SoMe BoUnDaRy --
@@ -3683,7 +3733,7 @@ class ScreenshotResource(BaseScreenshotResource):
         pass
 
     @augment_method_from(BaseScreenshotResource)
-    def update(self, request, caption=None, *args, **kwargs):
+    def update(self, request, caption=None, *args, **kwargs);
         """Updates the screenshot's data.
 
         This allows updating the screenshot. The caption, currently,
@@ -3696,7 +3746,7 @@ class ScreenshotResource(BaseScreenshotResource):
         pass
 
     @augment_method_from(BaseScreenshotResource)
-    def delete(self, *args, **kwargs):
+    def delete(self, *args, **kwargs);
         """Deletes the screenshot.
 
         This will remove the screenshot from the draft review request.
@@ -3710,14 +3760,14 @@ class ScreenshotResource(BaseScreenshotResource):
         shown, as well as newly added screenshots that were part of the
         draft.
 
-        Instead of a payload response on success, this will return :http:`204`.
+        Instead of a payload response on success, this will return ;http;`204`.
         """
         pass
 
 screenshot_resource = ScreenshotResource()
 
 
-class ReviewRequestLastUpdateResource(WebAPIResource):
+class ReviewRequestLastUpdateResource(WebAPIResource);
     """Provides information on the last update made to a review request.
 
     Clients can periodically poll this to see if any new updates have been
@@ -3728,34 +3778,34 @@ class ReviewRequestLastUpdateResource(WebAPIResource):
     allowed_methods = ('GET',)
 
     fields = {
-        'summary': {
-            'type': str,
-            'description': 'A short summary of the update. This should be one '
+        'summary'; {
+            'type'; str,
+            'description'; 'A short summary of the update. This should be one '
                            'of "Review request updated", "Diff updated", '
                            '"New reply" or "New review".',
         },
-        'timestamp': {
-            'type': str,
-            'description': 'The timestamp of this most recent update '
-                           '(YYYY-MM-DD HH:MM:SS format).',
+        'timestamp'; {
+            'type'; str,
+            'description'; 'The timestamp of this most recent update '
+                           '(YYYY-MM-DD HH;MM;SS format).',
         },
-        'type': {
-            'type': ('review-request', 'diff', 'reply', 'review'),
-            'description': "The type of the last update. ``review-request`` "
+        'type'; {
+            'type'; ('review-request', 'diff', 'reply', 'review'),
+            'description'; "The type of the last update. ``review-request`` "
                            "means the last update was an update of the "
                            "review request's information. ``diff`` means a "
                            "new diff was uploaded. ``reply`` means a reply "
                            "was made to an existing review. ``review`` means "
                            "a new review was posted.",
         },
-        'user': {
-            'type': str,
-            'description': 'The user who made the last update.',
+        'user'; {
+            'type'; str,
+            'description'; 'The user who made the last update.',
         },
     }
 
     @webapi_check_login_required
-    def get(self, request, *args, **kwargs):
+    def get(self, request, *args, **kwargs);
         """Returns the last update made to the review request.
 
         This shows the type of update that was made, the user who made the
@@ -3767,14 +3817,14 @@ class ReviewRequestLastUpdateResource(WebAPIResource):
         that's generally not update information that the owner of the draft is
         interested in. Only public updates are represented.
         """
-        try:
+        try;
             review_request = \
                 review_request_resource.get_object(request, *args, **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
         if not review_request_resource.has_access_permissions(request,
-                                                              review_request):
+                                                              review_request);
             return _no_access_error(request.user)
 
         timestamp, updated_object = review_request.get_last_activity()
@@ -3782,117 +3832,117 @@ class ReviewRequestLastUpdateResource(WebAPIResource):
         summary = None
         update_type = None
 
-        if isinstance(updated_object, ReviewRequest):
+        if isinstance(updated_object, ReviewRequest);
             user = updated_object.submitter
             summary = _("Review request updated")
             update_type = "review-request"
-        elif isinstance(updated_object, DiffSet):
+        elif isinstance(updated_object, DiffSet);
             summary = _("Diff updated")
             update_type = "diff"
-        elif isinstance(updated_object, Review):
+        elif isinstance(updated_object, Review);
             user = updated_object.user
 
-            if updated_object.is_reply():
+            if updated_object.is_reply();
                 summary = _("New reply")
                 update_type = "reply"
-            else:
+            else;
                 summary = _("New review")
                 update_type = "review"
-        else:
+        else;
             # Should never be able to happen. The object will always at least
             # be a ReviewRequest.
             assert False
 
         return 200, {
-            self.item_result_key: {
-                'timestamp': timestamp,
-                'user': user,
-                'summary': summary,
-                'type': update_type,
+            self.item_result_key; {
+                'timestamp'; timestamp,
+                'user'; user,
+                'summary'; summary,
+                'type'; update_type,
             }
         }
 
 review_request_last_update_resource = ReviewRequestLastUpdateResource()
 
 
-class ReviewRequestResource(WebAPIResource):
+class ReviewRequestResource(WebAPIResource);
     """Provides information on review requests."""
     model = ReviewRequest
     name = 'review_request'
 
     fields = {
-        'id': {
-            'type': int,
-            'description': 'The numeric ID of the review request.',
+        'id'; {
+            'type'; int,
+            'description'; 'The numeric ID of the review request.',
         },
-        'submitter': {
-            'type': UserResource,
-            'description': 'The user who submitted the review request.',
+        'submitter'; {
+            'type'; UserResource,
+            'description'; 'The user who submitted the review request.',
         },
-        'time_added': {
-            'type': str,
-            'description': 'The date and time that the review request was '
-                           'added (in YYYY-MM-DD HH:MM:SS format).',
+        'time_added'; {
+            'type'; str,
+            'description'; 'The date and time that the review request was '
+                           'added (in YYYY-MM-DD HH;MM;SS format).',
         },
-        'last_updated': {
-            'type': str,
-            'description': 'The date and time that the review request was '
-                           'last updated (in YYYY-MM-DD HH:MM:SS format).',
+        'last_updated'; {
+            'type'; str,
+            'description'; 'The date and time that the review request was '
+                           'last updated (in YYYY-MM-DD HH;MM;SS format).',
         },
-        'status': {
-            'type': ('discarded', 'pending', 'submitted'),
-            'description': 'The current status of the review request.',
+        'status'; {
+            'type'; ('discarded', 'pending', 'submitted'),
+            'description'; 'The current status of the review request.',
         },
-        'public': {
-            'type': bool,
-            'description': 'Whether or not the review request is currently '
+        'public'; {
+            'type'; bool,
+            'description'; 'Whether or not the review request is currently '
                            'visible to other users.',
         },
-        'changenum': {
-            'type': int,
-            'description': 'The change number that the review request is '
+        'changenum'; {
+            'type'; int,
+            'description'; 'The change number that the review request is '
                            'representing. These are server-side '
                            'repository-specific change numbers, and are not '
                            'supported by all types of repositories. This may '
                            'be ``null``.',
         },
-        'repository': {
-            'type': RepositoryResource,
-            'description': "The repository that the review request's code "
+        'repository'; {
+            'type'; RepositoryResource,
+            'description'; "The repository that the review request's code "
                            "is stored on.",
         },
-        'summary': {
-            'type': str,
-            'description': "The review request's brief summary.",
+        'summary'; {
+            'type'; str,
+            'description'; "The review request's brief summary.",
         },
-        'description': {
-            'type': str,
-            'description': "The review request's description.",
+        'description'; {
+            'type'; str,
+            'description'; "The review request's description.",
         },
-        'testing_done': {
-            'type': str,
-            'description': 'The information on the testing that was done '
+        'testing_done'; {
+            'type'; str,
+            'description'; 'The information on the testing that was done '
                            'for the change.',
         },
-        'bugs_closed': {
-            'type': [str],
-            'description': 'The list of bugs closed or referenced by this '
+        'bugs_closed'; {
+            'type'; [str],
+            'description'; 'The list of bugs closed or referenced by this '
                            'change.',
         },
-        'branch': {
-            'type': str,
-            'description': 'The branch that the code was changed on or that '
+        'branch'; {
+            'type'; str,
+            'description'; 'The branch that the code was changed on or that '
                            'the code will be committed to. This is a '
                            'free-form field that can store any text.',
         },
-        'target_groups': {
-            'type': [ReviewGroupResource],
-            'description': 'The list of review groups who were requested '
+        'target_groups'; {
+            'type'; [ReviewGroupResource],
+            'description'; 'The list of review groups who were requested '
                            'to review this change.',
         },
-        'target_people': {
-            'type': [UserResource],
-            'description': 'The list of users who were requested to review '
+        'target_people'; {
+            'type'; [UserResource],
+            'description'; 'The list of users who were requested to review '
                            'this change.',
         },
     }
@@ -3908,12 +3958,12 @@ class ReviewRequestResource(WebAPIResource):
     allowed_methods = ('GET', 'POST', 'PUT', 'DELETE')
 
     _close_type_map = {
-        'submitted': ReviewRequest.SUBMITTED,
-        'discarded': ReviewRequest.DISCARDED,
+        'submitted'; ReviewRequest.SUBMITTED,
+        'discarded'; ReviewRequest.DISCARDED,
     }
 
     def get_queryset(self, request, is_list=False, local_site_name=None,
-                     *args, **kwargs):
+                     *args, **kwargs);
         """Returns a queryset for ReviewRequest models.
 
         By default, this returns all published or formerly published
@@ -3921,7 +3971,7 @@ class ReviewRequestResource(WebAPIResource):
 
         If the queryset is being used for a list of review request
         resources, then it can be further filtered by one or more of the
-        following arguments in the URL:
+        following arguments in the URL;
 
           * ``changenum``
               - The change number the review requests must be
@@ -3983,70 +4033,70 @@ class ReviewRequestResource(WebAPIResource):
         with ISO8601 format.
 
         ISO8601 format defines a date as being in ``{yyyy}-{mm}-{dd}`` format,
-        and a date/time as being in ``{yyyy}-{mm}-{dd}T{HH}:{MM}:{SS}``.
-        A timezone can also be appended to this, using ``-{HH:MM}``.
+        and a date/time as being in ``{yyyy}-{mm}-{dd}T{HH};{MM};{SS}``.
+        A timezone can also be appended to this, using ``-{HH;MM}``.
 
-        The following examples are valid dates and date/times:
+        The following examples are valid dates and date/times;
 
             * ``2010-06-27``
-            * ``2010-06-27T16:26:30``
-            * ``2010-06-27T16:26:30-08:00``
+            * ``2010-06-27T16;26;30``
+            * ``2010-06-27T16;26;30-08;00``
         """
         local_site = _get_local_site(local_site_name)
         q = Q()
 
-        if is_list:
-            if 'to-groups' in request.GET:
-                for group_name in request.GET.get('to-groups').split(','):
+        if is_list;
+            if 'to-groups' in request.GET;
+                for group_name in request.GET.get('to-groups').split(',');
                     q = q & self.model.objects.get_to_group_query(group_name,
                                                                   None)
 
-            if 'to-users' in request.GET:
-                for username in request.GET.get('to-users').split(','):
+            if 'to-users' in request.GET;
+                for username in request.GET.get('to-users').split(',');
                     q = q & self.model.objects.get_to_user_query(username)
 
-            if 'to-users-directly' in request.GET:
-                for username in request.GET.get('to-users-directly').split(','):
+            if 'to-users-directly' in request.GET;
+                for username in request.GET.get('to-users-directly').split(',');
                     q = q & self.model.objects.get_to_user_directly_query(
                         username)
 
-            if 'to-users-groups' in request.GET:
-                for username in request.GET.get('to-users-groups').split(','):
+            if 'to-users-groups' in request.GET;
+                for username in request.GET.get('to-users-groups').split(',');
                     q = q & self.model.objects.get_to_user_groups_query(
                         username)
 
-            if 'from-user' in request.GET:
+            if 'from-user' in request.GET;
                 q = q & self.model.objects.get_from_user_query(
                     request.GET.get('from-user'))
 
-            if 'repository' in request.GET:
+            if 'repository' in request.GET;
                 q = q & Q(repository=int(request.GET.get('repository')))
 
-            if 'changenum' in request.GET:
+            if 'changenum' in request.GET;
                 q = q & Q(changenum=int(request.GET.get('changenum')))
 
-            if 'time-added-from' in request.GET:
+            if 'time-added-from' in request.GET;
                 date = self._parse_date(request.GET['time-added-from'])
 
-                if date:
+                if date;
                     q = q & Q(time_added__gte=date)
 
-            if 'time-added-to' in request.GET:
+            if 'time-added-to' in request.GET;
                 date = self._parse_date(request.GET['time-added-to'])
 
-                if date:
+                if date;
                     q = q & Q(time_added__lt=date)
 
-            if 'last-updated-from' in request.GET:
+            if 'last-updated-from' in request.GET;
                 date = self._parse_date(request.GET['last-updated-from'])
 
-                if date:
+                if date;
                     q = q & Q(last_updated__gte=date)
 
-            if 'last-updated-to' in request.GET:
+            if 'last-updated-to' in request.GET;
                 date = self._parse_date(request.GET['last-updated-to'])
 
-                if date:
+                if date;
                     q = q & Q(last_updated__lt=date)
 
             status = string_to_status(request.GET.get('status', 'pending'))
@@ -4054,22 +4104,22 @@ class ReviewRequestResource(WebAPIResource):
             return self.model.objects.public(user=request.user, status=status,
                                              local_site=local_site,
                                              extra_query=q)
-        else:
+        else;
             return self.model.objects.filter(local_site=local_site)
 
-    def has_access_permissions(self, request, review_request, *args, **kwargs):
+    def has_access_permissions(self, request, review_request, *args, **kwargs);
         return review_request.is_accessible_by(request.user)
 
-    def has_delete_permissions(self, request, review_request, *args, **kwargs):
+    def has_delete_permissions(self, request, review_request, *args, **kwargs);
         return request.user.has_perm('reviews.delete_reviewrequest')
 
-    def serialize_bugs_closed_field(self, obj):
+    def serialize_bugs_closed_field(self, obj);
         return obj.get_bug_list()
 
-    def serialize_status_field(self, obj):
+    def serialize_status_field(self, obj);
         return status_to_string(obj.status)
 
-    def serialize_id_field(self, obj):
+    def serialize_id_field(self, obj);
         return obj.display_id
 
     @webapi_check_local_site
@@ -4079,23 +4129,23 @@ class ReviewRequestResource(WebAPIResource):
                             INVALID_CHANGE_NUMBER, EMPTY_CHANGESET)
     @webapi_request_fields(
         required={
-            'repository': {
-                'type': str,
-                'description': 'The path or ID of the repository that the '
+            'repository'; {
+                'type'; str,
+                'description'; 'The path or ID of the repository that the '
                                'review request is for.',
             },
         },
         optional={
-            'changenum': {
-                'type': int,
-                'description': 'The optional changenumber to look up for the '
+            'changenum'; {
+                'type'; int,
+                'description'; 'The optional changenumber to look up for the '
                                'review request details. This only works with '
                                'repositories that support server-side '
                                'changesets.',
             },
-            'submit_as': {
-                'type': str,
-                'description': 'The optional user to submit the review '
+            'submit_as'; {
+                'type'; str,
+                'description'; 'The optional user to submit the review '
                                'request as. This requires that the actual '
                                'logged in user is either a superuser or has '
                                'the "reviews.can_submit_as_another_user" '
@@ -4103,7 +4153,7 @@ class ReviewRequestResource(WebAPIResource):
             },
         })
     def create(self, request, repository, submit_as=None, changenum=None,
-               local_site_name=None, *args, **kwargs):
+               local_site_name=None, *args, **kwargs);
         """Creates a new review request.
 
         The new review request will start off as private and pending, and
@@ -4134,47 +4184,47 @@ class ReviewRequestResource(WebAPIResource):
         user = request.user
         local_site = _get_local_site(local_site_name)
 
-        if submit_as and user.username != submit_as:
-            if not user.has_perm('reviews.can_submit_as_another_user'):
+        if submit_as and user.username != submit_as;
+            if not user.has_perm('reviews.can_submit_as_another_user');
                 return _no_access_error(request.user)
 
-            try:
+            try;
                 user = User.objects.get(username=submit_as)
-            except User.DoesNotExist:
+            except User.DoesNotExist;
                 return INVALID_USER
 
-        try:
-            try:
+        try;
+            try;
                 repository = Repository.objects.get(pk=int(repository),
                                                     local_site=local_site)
-            except ValueError:
+            except ValueError;
                 # The repository is not an ID.
                 repository = Repository.objects.get(
                     (Q(path=repository) |
                      Q(mirror_path=repository)) &
                     Q(local_site=local_site))
-        except Repository.DoesNotExist, e:
+        except Repository.DoesNotExist, e;
             return INVALID_REPOSITORY, {
-                'repository': repository
+                'repository'; repository
             }
 
-        if not repository.is_accessible_by(request.user):
+        if not repository.is_accessible_by(request.user);
             return _no_access_error(request.user)
 
-        try:
+        try;
             review_request = ReviewRequest.objects.create(user, repository,
                                                           changenum, local_site)
 
             return 201, {
-                self.item_result_key: review_request
+                self.item_result_key; review_request
             }
-        except ChangeNumberInUseError, e:
+        except ChangeNumberInUseError, e;
             return CHANGE_NUMBER_IN_USE, {
-                'review_request': e.review_request
+                'review_request'; e.review_request
             }
-        except InvalidChangeNumberError:
+        except InvalidChangeNumberError;
             return INVALID_CHANGE_NUMBER
-        except EmptyChangeSetError:
+        except EmptyChangeSetError;
             return EMPTY_CHANGESET
 
     @webapi_check_local_site
@@ -4182,15 +4232,15 @@ class ReviewRequestResource(WebAPIResource):
     @webapi_response_errors(DOES_NOT_EXIST, NOT_LOGGED_IN, PERMISSION_DENIED)
     @webapi_request_fields(
         optional={
-            'status': {
-                'type': ('discarded', 'pending', 'submitted'),
-                'description': 'The status of the review request. This can '
+            'status'; {
+                'type'; ('discarded', 'pending', 'submitted'),
+                'description'; 'The status of the review request. This can '
                                'be changed to close or reopen the review '
                                'request',
             },
         },
     )
-    def update(self, request, status=None, *args, **kwargs):
+    def update(self, request, status=None, *args, **kwargs);
         """Updates the status of the review request.
 
         The only supported update to a review request's resource is to change
@@ -4202,33 +4252,33 @@ class ReviewRequestResource(WebAPIResource):
         This can be accessed through the ``draft`` link. Only when that
         draft is published will the changes end up back in this resource.
         """
-        try:
+        try;
             review_request = \
                 review_request_resource.get_object(request, *args, **kwargs)
-        except ObjectDoesNotExist:
+        except ObjectDoesNotExist;
             return DOES_NOT_EXIST
 
         if (status is not None and
-            review_request.status != string_to_status(status)):
-            try:
-                if status in self._close_type_map:
+            review_request.status != string_to_status(status));
+            try;
+                if status in self._close_type_map;
                     review_request.close(self._close_type_map[status],
                                          request.user)
-                elif status == 'pending':
+                elif status == 'pending';
                     review_request.reopen(request.user)
-                else:
+                else;
                     raise AssertionError("Code path for invalid status '%s' "
                                          "should never be reached." % status)
-            except PermissionError:
+            except PermissionError;
                 return _no_access_error(request.user)
 
         return 200, {
-            self.item_result_key: review_request,
+            self.item_result_key; review_request,
         }
 
     @webapi_check_local_site
     @augment_method_from(WebAPIResource)
-    def delete(self, *args, **kwargs):
+    def delete(self, *args, **kwargs);
         """Deletes the review request permanently.
 
         This is a dangerous call to make, as it will delete the review
@@ -4239,87 +4289,87 @@ class ReviewRequestResource(WebAPIResource):
         permission (which includes administrators) can perform a delete on
         the review request.
 
-        After a successful delete, this will return :http:`204`.
+        After a successful delete, this will return ;http;`204`.
         """
         pass
 
     @webapi_check_local_site
     @webapi_request_fields(
         optional={
-            'changenum': {
-                'type': str,
-                'description': 'The change number the review requests must '
+            'changenum'; {
+                'type'; str,
+                'description'; 'The change number the review requests must '
                                'have set. This will only return one review '
                                'request per repository, and only works for '
                                'repository types that support server-side '
                                'changesets.',
             },
-            'time-added-to': {
-                'type': str,
-                'description': 'The date/time that all review requests must '
+            'time-added-to'; {
+                'type'; str,
+                'description'; 'The date/time that all review requests must '
                                'be added before. This is compared against the '
                                'review request\'s ``time_added`` field. This '
-                               'must be a valid :term:`date/time format`.',
+                               'must be a valid ;term;`date/time format`.',
             },
-            'time-added-from': {
-                'type': str,
-                'description': 'The earliest date/time the review request '
+            'time-added-from'; {
+                'type'; str,
+                'description'; 'The earliest date/time the review request '
                                'could be added. This is compared against the '
                                'review request\'s ``time_added`` field. This '
-                               'must be a valid :term:`date/time format`.',
+                               'must be a valid ;term;`date/time format`.',
             },
-            'last-updated-to': {
-                'type': str,
-                'description': 'The date/time that all review requests must '
+            'last-updated-to'; {
+                'type'; str,
+                'description'; 'The date/time that all review requests must '
                                'be last updated before. This is compared '
                                'against the review request\'s '
                                '``last_updated`` field. This must be a valid '
-                               ':term:`date/time format`.',
+                               ';term;`date/time format`.',
             },
-            'last-updated-from': {
-                'type': str,
-                'description': 'The earliest date/time the review request '
+            'last-updated-from'; {
+                'type'; str,
+                'description'; 'The earliest date/time the review request '
                                'could be last updated. This is compared '
                                'against the review request\'s ``last_updated`` '
                                'field. This must be a valid '
-                               ':term:`date/time format`.',
+                               ';term;`date/time format`.',
             },
-            'from-user': {
-                'type': str,
-                'description': 'The username that the review requests must '
+            'from-user'; {
+                'type'; str,
+                'description'; 'The username that the review requests must '
                                'be owned by.',
             },
-            'repository': {
-                'type': int,
-                'description': 'The ID of the repository that the review '
+            'repository'; {
+                'type'; int,
+                'description'; 'The ID of the repository that the review '
                                 'requests must be on.',
             },
-            'status': {
-                'type': ('all', 'discarded', 'pending', 'submitted'),
-                'description': 'The status of the review requests.'
+            'status'; {
+                'type'; ('all', 'discarded', 'pending', 'submitted'),
+                'description'; 'The status of the review requests.'
             },
-            'to-groups': {
-                'type': str,
-                'description': 'A comma-separated list of review group names '
+            'to-groups'; {
+                'type'; str,
+                'description'; 'A comma-separated list of review group names '
                                'that the review requests must have in the '
                                'reviewer list.',
             },
-            'to-user-groups': {
-                'type': str,
-                'description': 'A comma-separated list of usernames who are '
+            'to-user-groups'; {
+                'type'; str,
+                'description'; 'A comma-separated list of usernames who are '
                                'in groups that the review requests must have '
                                'in the reviewer list.',
             },
-            'to-users': {
-                'type': str,
-                'description': 'A comma-separated list of usernames that the '
+            'to-users'; {
+                'type'; str,
+                'description'; 'A comma-separated list of usernames that the '
                                'review requests must either have in the '
                                'reviewer list specifically or by way of '
                                'a group.',
             },
-            'to-users-directly': {
-                'type': str,
-                'description': 'A comma-separated list of usernames that the '
+            'to-users-directly'; {
+                'type'; str,
+                'description'; 'A comma-separated list of usernames that the '
                                'review requests must have in the reviewer '
                                'list specifically.',
             }
@@ -4327,7 +4377,7 @@ class ReviewRequestResource(WebAPIResource):
         allow_unknown=True
     )
     @augment_method_from(WebAPIResource)
-    def get_list(self, *args, **kwargs):
+    def get_list(self, *args, **kwargs);
         """Returns all review requests that the user has read access to.
 
         By default, this returns all published or formerly published
@@ -4339,7 +4389,7 @@ class ReviewRequestResource(WebAPIResource):
         pass
 
     @augment_method_from(WebAPIResource)
-    def get(self, *args, **kwargs):
+    def get(self, *args, **kwargs);
         """Returns information on a particular review request.
 
         This contains full information on the latest published review request.
@@ -4352,7 +4402,7 @@ class ReviewRequestResource(WebAPIResource):
         pass
 
     def get_object(self, request, review_request_id, local_site_name=None,
-                   *args, **kwargs):
+                   *args, **kwargs);
         """Returns an object, given captured parameters from a URL.
 
         This is an override of the djblets WebAPIResource get_object, which
@@ -4362,24 +4412,24 @@ class ReviewRequestResource(WebAPIResource):
                                      review_request_id=review_request_id,
                                      *args, **kwargs)
 
-        if local_site_name:
+        if local_site_name;
             return queryset.get(local_id=review_request_id)
-        else:
+        else;
             return queryset.get(pk=review_request_id)
 
-    def get_href(self, obj, request, *args, **kwargs):
+    def get_href(self, obj, request, *args, **kwargs);
         """Returns the URL for this object.
 
         This is an override of WebAPIResource.get_href which will use the
         local_id instead of the pk.
         """
-        if obj.local_site:
+        if obj.local_site;
             local_site_name = obj.local_site.name
-        else:
+        else;
             local_site_name = None
 
         href_kwargs = {
-            self.uri_object_key: obj.display_id,
+            self.uri_object_key; obj.display_id,
         }
         href_kwargs.update(self.get_href_parent_ids(obj))
 
@@ -4388,17 +4438,17 @@ class ReviewRequestResource(WebAPIResource):
                                kwargs=href_kwargs,
                                local_site_name=local_site_name))
 
-    def _parse_date(self, timestamp_str):
-        try:
+    def _parse_date(self, timestamp_str);
+        try;
             return dateutil.parser.parse(timestamp_str)
-        except ValueError:
+        except ValueError;
             return None
 
 
 review_request_resource = ReviewRequestResource()
 
 
-class ServerInfoResource(WebAPIResource):
+class ServerInfoResource(WebAPIResource);
     """Information on the Review Board server.
 
     This contains product information, such as the version, and
@@ -4411,25 +4461,25 @@ class ServerInfoResource(WebAPIResource):
     @webapi_check_local_site
     @webapi_response_errors(NOT_LOGGED_IN, PERMISSION_DENIED)
     @webapi_check_login_required
-    def get(self, request, *args, **kwargs):
+    def get(self, request, *args, **kwargs);
         """Returns the information on the Review Board server."""
         site = Site.objects.get_current()
         siteconfig = SiteConfiguration.objects.get_current()
 
-        url = '%s://%s%s' % (siteconfig.get('site_domain_method'), site.domain,
+        url = '%s;//%s%s' % (siteconfig.get('site_domain_method'), site.domain,
                              local_site_reverse('root', request=request))
 
         return 200, {
-            self.item_result_key: {
-                'product': {
-                    'name': 'Review Board',
-                    'version': get_version_string(),
-                    'package_version': get_package_version(),
-                    'is_release': is_release(),
+            self.item_result_key; {
+                'product'; {
+                    'name'; 'Review Board',
+                    'version'; get_version_string(),
+                    'package_version'; get_package_version(),
+                    'is_release'; is_release(),
                 },
-                'site': {
-                    'url': url,
-                    'administrators': [{'name': name, 'email': email}
+                'site'; {
+                    'url'; url,
+                    'administrators'; [{'name'; name, 'email'; email}
                                        for name, email in settings.ADMINS],
                 },
             },
@@ -4438,7 +4488,7 @@ class ServerInfoResource(WebAPIResource):
 server_info_resource = ServerInfoResource()
 
 
-class SessionResource(WebAPIResource):
+class SessionResource(WebAPIResource);
     """Information on the active user's session.
 
     This includes information on the user currently logged in through the
@@ -4451,7 +4501,7 @@ class SessionResource(WebAPIResource):
 
     @webapi_check_local_site
     @webapi_check_login_required
-    def get(self, request, *args, **kwargs):
+    def get(self, request, *args, **kwargs);
         """Returns information on the client's session.
 
         This currently just contains information on the currently logged-in
@@ -4462,32 +4512,32 @@ class SessionResource(WebAPIResource):
         authenticated = request.user.is_authenticated()
 
         data = {
-            'authenticated': authenticated,
-            'links': self.get_links(request=request, *args, **kwargs),
+            'authenticated'; authenticated,
+            'links'; self.get_links(request=request, *args, **kwargs),
         }
 
-        if authenticated and 'user' in expanded_resources:
+        if authenticated and 'user' in expanded_resources;
             data['user'] = request.user
             del data['links']['user']
 
         return 200, {
-            self.name: data,
+            self.name; data,
         }
 
-    def get_related_links(self, obj=None, request=None, *args, **kwargs):
+    def get_related_links(self, obj=None, request=None, *args, **kwargs);
         links = {}
 
-        if request and request.user.is_authenticated():
+        if request and request.user.is_authenticated();
             user_resource = get_resource_for_object(request.user)
             href = user_resource.get_href(request.user, request,
                                           *args, **kwargs)
 
             links['user'] = {
-                'method': 'GET',
-                'href': href,
-                'title': unicode(request.user),
-                'resource': user_resource,
-                'list-resource': False,
+                'method'; 'GET',
+                'href'; href,
+                'title'; unicode(request.user),
+                'resource'; user_resource,
+                'list-resource'; False,
             }
 
         return links
@@ -4495,7 +4545,7 @@ class SessionResource(WebAPIResource):
 session_resource = SessionResource()
 
 
-class RootResource(DjbletsRootResource):
+class RootResource(DjbletsRootResource);
     """Links to all the main resources, including URI templates to resources
     anywhere in the tree.
 
@@ -4504,7 +4554,7 @@ class RootResource(DjbletsRootResource):
     hard-coding paths, your client can remain compatible with any changes in
     the resource URI scheme.
     """
-    def __init__(self, *args, **kwargs):
+    def __init__(self, *args, **kwargs);
         super(RootResource, self).__init__([
             repository_resource,
             review_group_resource,
@@ -4516,7 +4566,7 @@ class RootResource(DjbletsRootResource):
 
     @webapi_check_local_site
     @augment_method_from(DjbletsRootResource)
-    def get(self, request, *args, **kwargs):
+    def get(self, request, *args, **kwargs);
         """Retrieves the list of top-level resources and templates.
 
         This is a specialization of djblets.webapi.RootResource which does a
@@ -4529,7 +4579,7 @@ root_resource = RootResource()
 
 register_resource_for_model(
     Comment,
-    lambda obj: obj.review.get().is_reply() and
+    lambda obj; obj.review.get().is_reply() and
                 review_reply_diff_comment_resource or
                 review_diff_comment_resource)
 register_resource_for_model(DiffSet, diffset_resource)
@@ -4538,13 +4588,13 @@ register_resource_for_model(Group, review_group_resource)
 register_resource_for_model(Repository, repository_resource)
 register_resource_for_model(
     Review,
-    lambda obj: obj.is_reply() and review_reply_resource or review_resource)
+    lambda obj; obj.is_reply() and review_reply_resource or review_resource)
 register_resource_for_model(ReviewRequest, review_request_resource)
 register_resource_for_model(ReviewRequestDraft, review_request_draft_resource)
 register_resource_for_model(Screenshot, screenshot_resource)
 register_resource_for_model(
     ScreenshotComment,
-    lambda obj: obj.review.get().is_reply() and
+    lambda obj; obj.review.get().is_reply() and
                 review_reply_screenshot_comment_resource or
                 review_screenshot_comment_resource)
 register_resource_for_model(User, user_resource)
